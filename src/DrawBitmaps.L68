00000000 Starting Address
Assembler used: EASy68K Editor/Assembler v5.16.01
Created On: 7/3/2023 9:59:23 AM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Bitmap Subroutine
00000000                             3  * Written by :
00000000                             4  * Date       :
00000000                             5  * Description:
00000000                             6  
00000000                             7  * In this exercise, you will create a subroutine that can display
00000000                             8  *   a chunk of a .bmp file. The arguments required for your subroutine are:
00000000                             9  *   - Pointer to .bmp file (NOT a pointer to the pixel data)
00000000                            10  *   - Top, Left corner (x,y) of the bitmap chunk you want to display
00000000                            11  *   - Width and Height of the bitmap chunk you want to display
00000000                            12  *   - Top, Left corner (x,y) on the output screen to display your chunk
00000000                            13  * You will need to handle 24-bit and 32-bit bitmaps
00000000                            14  *debug if not bitmap
00000000                            15  * edge cases (not a file)
00000000                            16  *-----------------------------------------------------------
00000000                            17      
00000000                            18      
00000000                            19        ;Pointer to bmp file is already handled
00000000                            20      ;d5 = top left corner of bitmap X and Y is gonna be handled by d1. Most significant bytes are the X, least significant bytes are the Y
00000000                            21          ;Potential checks: Make sure that X and Y are within the bounds of the picture
00000000                            22      ;d6 = Width and height of bitmap chunk to display will be handled by d2. Most significant bytes are X, least significant bytes are Y
00000000                            23          ;potential checks: Make sure that X and Y + corners doesn't take you out of the image. If it does, throw an error
00000000                            24      ;d7 = top left corner of hte output screen to display chunk. will be in d3
00000000                            25          ;In the event that the screen is too small, resize it(?)
00000000                            26          
00000000                            27  DISPLAY_BMP_DATA:
00000000                            28     ValidBMP:
00000000                            29          ;LSB in d4 will be set based on the status of the display.
00000000                            30              ;0 = no errors
00000000                            31              ;1 = invalid bmp file/not a bmp file
00000000                            32              ;2 = topleft corner of bmp is invalid
00000000                            33              ;3 = Width and height of d2 is invalid
00000000                            34              ;4 = this is not a 24 or 32-bit bitmap.
00000000                            35              ;if LSB is not 0 by the end of this, go to RestoreRegisters.
00000000                            36                  ;Nothing will be displayed and our "error flag" will be set,
00000000                            37                  ;to be parsed outside the subroutine
00000000                            38  
00000000                            39      ;Loading in the width Backup and the "whattoadd"
Line 40 ERROR: Undefined symbol
00000000  41F9 004DBD16             40      lea BITMAP, a0              
00000006  1628 000A                 41      move.b 10(a0), d3           ;Saving start offset into d3
0000000A                            42      
0000000A  1828 001C                 43      move.b  $1C(a0), d4         ;bits per pixel
0000000E                            44      
0000000E  43F9 00000128             45      lea END_LINE_ADD, a1
00000014                            46  
00000014                            47      
00000014  1428 0013                 48      move.b  $13(a0),d2   ;pic width
00000018  E14A                      49      lsl.w   #8, d2
0000001A  1428 0012                 50      move.b  $12(a0),d2
0000001E                            51      
0000001E  D446                      52      add.w  d6, d2       ;picwidth + chunkwidth
00000020  E58A                      53      lsl.l   #2, d2
00000022  0C04 0020                 54      cmpi.b  #32, d4
00000026                            55  
00000026  6700 000A                 56      beq TwentyFourBitEndLineChange
0000002A  E48A                      57      lsr.l   #2, d2
0000002C  2202                      58      move.l  d2, d1
0000002E  D481                      59      add.l   d1, d2
00000030  D481                      60      add.l   d1, d2
00000032                            61      
00000032                            62      
00000032                            63      TwentyFourBitEndLineChange:
00000032  3282                      64      move.w  d2, (a1)    ;END_LINE_ADD has what to add/subtract at the end/beginning of a line respectively
00000034  45F9 00000126             65      lea WIDTH_BACKUP, a2
0000003A  3486                      66      move.w  d6, (a2)
0000003C  DD52                      67      add.w   d6, (a2)
0000003E  DD52                      68      add.w   d6, (a2)
00000040  DD52                      69      add.w   d6, (a2)
00000042                            70      
00000042                            71      ;Height measurements in LSW d5 and d6
00000042                            72      
00000042  4242                      73      clr.w   d2
00000044  1428 0013                 74      move.b  $13(a0),d2   ;pic width
00000048  E14A                      75      lsl.w   #8, d2
0000004A  1428 0012                 76      move.b  $12(a0),d2
0000004E                            77          
0000004E  1228 0017                 78      move.b  $17(a0),d1   ;pic height
00000052  E149                      79      lsl.w   #8, d1
00000054  1228 0016                 80      move.b  $16(a0),d1
00000058                            81      
00000058                            82      ;to get starting position, you need to get:
00000058                            83      ;4((TLC.y + height)*totalwidth + (TLC.x + chunkWidth))  OR 3x
00000058                            84  
00000058  4845                      85      swap    d5
0000005A  4846                      86      swap    d6
0000005C  4280                      87      clr.l   d0
0000005E                            88      
0000005E  3001                      89      move.w  d1, d0
00000060  9046                      90      sub.w  d6, d0                          
00000062  9045                      91      sub.w   d5, d0      
00000064  C0C2                      92      mulu.w  d2, d0      ;Image is stored as bottom left = 0,0
00000066  4845                      93      swap    d5
00000068  4846                      94      swap    d6
0000006A  4281                      95      clr.l   d1
0000006C                            96  
0000006C  3206                      97      move.w  d6, d1
0000006E  D081                      98      add.l   d1, d0
00000070  3205                      99      move.w  d5, d1
00000072  D081                     100      add.l   d1, d0 
00000074                           101  
00000074  E588                     102      lsl.l   #2, d0      ;d0 is now 4((TLC.y + height)*totalwidth + (TLC.x + chunkWidth)) 
00000076                           103      
00000076                           104      
00000076  0C04 0020                105      cmpi.b  #32, d4     ;if 24 bit, then don't change the value in d0. otherwise, redo the change and multiply by 3.
0000007A  6700 000A                106      beq     TwentyFourBitOffsetChange
0000007E  E488                     107      lsr.l   #2, d0
00000080  2200                     108      move.l  d0, d1
00000082  D081                     109      add.l   d1, d0
00000084  D081                     110      add.l   d1, d0
00000086                           111      
00000086                           112      TwentyFourBitOffsetChange:
00000086  D083                     113      add.l   d3, d0
00000088  D1C0                     114      adda.l  d0, a0   
0000008A                           115  
0000008A  E54E                     116      lsl.w   #2, d6
0000008C  4846                     117      swap    d6
0000008E  E54E                     118      lsl.w   #2, d6                  ;Width related stuff in LSW d5 and d6
00000090  4281                     119      clr.l   d1
00000092  0C04 0020                120      cmpi.b  #32, d4
00000096  6700 004E                121      beq     OUTERLOOP32 
0000009A                           122  
0000009A                           123   
0000009A                           124      DisplayBitmap:
0000009A                           125          ;Displaying a 24 bit bitmap. Separated for speed. Instead of doing a cmp and beq call every pixel drawn, do it once and instead make this large. They use the same code anyways.
0000009A                           126          OuterLoop24:
0000009A  4846                     127          swap    d6
0000009C                           128              InnerLoop24:
0000009C  4281                     129              clr.l   d1
0000009E  5788                     130              suba.l  #3, a0
000000A0  1210                     131              move.b  (a0), d1
000000A2  E189                     132              lsl.l   #8, d1
000000A4  1228 0001                133              move.b  1(a0), d1
000000A8  E189                     134              lsl.l   #8, d1
000000AA  1228 0002                135              move.b  2(a0), d1
000000AE                           136              
000000AE                           137              
000000AE  7050                     138              move.l  #80, d0
000000B0  4E4F                     139              trap    #15
000000B2  7051                     140              move.l  #81, d0
000000B4  4E4F                     141              trap    #15
000000B6                           142                                          ; DRAWRECTANGLE:
000000B6  303C 0057                143              move.w  #87, d0             ; Drawing rectangles instead of pixels
000000BA  3207                     144              move.w  d7, d1
000000BC  4847                     145              swap    d7
000000BE  3407                     146              move.w  d7, d2
000000C0  4847                     147              swap    d7
000000C2  D246                     148              add.w   d6, d1
000000C4  4846                     149              swap    d6
000000C6  D446                     150              add.w   d6, d2
000000C8  4846                     151              swap    d6
000000CA  3601                     152              move.w  d1, d3
000000CC  5941                     153              subi.w  #4, d1
000000CE  3802                     154              move.w  d2, d4
000000D0  5942                     155              subi.w  #4, d2
000000D2  4E4F                     156              trap    #15
000000D4                           157              
000000D4                           158              
000000D4  5946                     159              subi.w  #4, d6          ;sub from x. 
000000D6  6EC4                     160              bgt     InnerLoop24
000000D8                           161          
000000D8  D0D1                     162          adda.w  (a1), a0                ;must account for dead space.
000000DA  DC52                     163          add.w   (a2), d6
000000DC                           164          
000000DC  4846                     165          swap    d6
000000DE  5946                     166          subi.w  #4, d6
000000E0  6EB8                     167          bgt OuterLoop24
000000E2  6000 0040                168          bra RESTOREREGISTERS
000000E6                           169      
000000E6                           170      
000000E6                           171          OuterLoop32:
000000E6  4846                     172          swap    d6
000000E8                           173              InnerLoop32:
000000E8  303C 0050                174              move.w  #80, d0
000000EC  2220                     175              move.l  -(a0), d1
000000EE  E089                     176              lsr.l   #8, d1
000000F0                           177  
000000F0  4E4F                     178              trap    #15
000000F2  303C 0051                179              move.w  #81, d0
000000F6  4E4F                     180              trap    #15
000000F8                           181              
000000F8  303C 0057                182              move.w  #87, d0             ;Drawing rectangles instead of pixels
000000FC  3207                     183              move.w  d7, d1
000000FE  4847                     184              swap    d7
00000100  3407                     185              move.w  d7, d2
00000102  4847                     186              swap    d7
00000104  D246                     187              add.w   d6, d1
00000106  4846                     188              swap    d6
00000108  D446                     189              add.w   d6, d2
0000010A  4846                     190              swap    d6
0000010C                           191              
0000010C  3601                     192              move.w  d1, d3
0000010E  5843                     193              addi.w  #4, d3
00000110  3802                     194              move.w  d2, d4
00000112  5844                     195              addi.w  #4, d4
00000114  4E4F                     196              trap    #15
00000116                           197              
00000116                           198              
00000116  5946                     199              subi.w  #4, d6          ;sub from x. 
00000118  66CE                     200              bne     InnerLoop32
0000011A                           201          
0000011A  D0D1                     202          adda.w  (a1), a0                ;must account for dead space.
0000011C  DC52                     203          add.w   (a2), d6
0000011E  4846                     204          swap    d6
00000120  5946                     205          subi.w  #4, d6
00000122  66C2                     206          bne OuterLoop32
00000124                           207      RestoreRegisters:
00000124                           208          ;Moves values from the stack / an address back to registers
00000124                           209          ;increments the stack pointer back
00000124                           210          ;DO NOT SET D0 HERE.    
00000124  4E75                     211      rts
00000126                           212  
00000126                           213  
00000126                           214  WIDTH_BACKUP            ds.w    1
00000128                           215  END_LINE_ADD            ds.w    1
0000012A                           216  
0000012A                           217  EOF
0000012A                           218  
0000012A                           219  
0000012A                           220  
0000012A                           221  
0000012A                           222  
0000012A                           223  
0000012A                           224  
0000012A                           225  
0000012A                           226  
0000012A                           227  
0000012A                           228  
Line 229 WARNING: END directive missing, starting address not set

1 error detected
1 warning generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
DISPLAYBITMAP       9A
DISPLAY_BMP_DATA    0
END_LINE_ADD        128
EOF                 12A
INNERLOOP24         9C
INNERLOOP32         E8
OUTERLOOP24         9A
OUTERLOOP32         E6
RESTOREREGISTERS    124
TWENTYFOURBITENDLINECHANGE  32
TWENTYFOURBITOFFSETCHANGE  86
VALIDBMP            0
WIDTH_BACKUP        126
