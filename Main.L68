0005B3A6 Starting Address
Assembler used: EASy68K Editor/Assembler v5.15.04
Created On: 8/2/2023 6:28:13 PM

00000000                             1  *-----------------------------------------------------------
00000000                             2  * Title      : Main Game Loop
00000000                             3  * Written by : ANTHONY PIZZIGONI
00000000                             4  * Date       : 6-26-23
00000000                             5  * Description: Holds the main loops for the different phases of gameplay.
00000000                             6  
00000000                             7  
00000000                             8  *    [GIVE DESCRIPTION OF GAME]
00000000                             9  *    [GIVE CONTROLS]
00000000                            10  *    OR LINK TO README
00000000                            11  
00000000                            12  
00000000                            13  
00000000                            14  
00000000                            15  *-----------------------------------------------------------
00000000                            16  
00000000                            17  
00001000                            18      ORG    $1000
00001000                            19      
00001000                            20      INCLUDE                             'src/Definitions.X68'
00001000                            21  
00001000  =000000BA                 22  STAGE_BORDER_X_MAX              EQU     186
00001000  =000000F0                 23  STAGE_BORDER_Y_MAX              EQU     240
00001000                            24  
00001000  =0000003C                 25  ENTITY_OFF_SCREEN_MAX           EQU     60        ;add 60 to their x or  and don't save it. if it is above 0, you're good. subtract this twice. if it is lower than max, then spawn it in.
00001000                            26  
00001000                            27  
00001000  =00000055                 28  PLAYER_SPAWN_POINT_X            EQU     85
00001000  =000000BE                 29  PLAYER_SPAWN_POINT_Y            EQU     190
00001000                            30  
00001000  =00000002                 31  PIXEL_SHIFT                    EQU     2
00001000  =00001680                 32  ANGLE_MAX                       EQU         $1680
00001000                            33  
00001000                            34  
00001000  =00000000                 35  EDT_OFFSET_PLAYER               EQU         $00
00001000  =00000001                 36  EDT_OFFSET_SLIME                EQU         $01
00001000  =00000002                 37  EDT_OFFSET_BULLET               EQU         $02
00001000  =00000003                 38  EDT_OFFSET_ROBOT                EQU         $03
00001000                            39  
00001000                            40  
00001000  =00000000                 41  GET_VELOCITY                    EQU         0   ;Get the velocity, 1 byte, unsigned, 2 fractional bits. max velocity of 63.75 (FF)
00001000  =00000001                 42  GET_ACCELERATION                EQU         1   ;Get acceleration, 1 byte, signed, 4 fractional bits. Max Velocity of ~8 (7F)
00001000  =00000002                 43  GET_THETA                       EQU         2   ;Get velocity, 1 byte, the value is 1/4 of actual theta, as theta is only in chunks of 4
00001000  =00000003                 44  GET_ANG_VEL                     EQU         3   ;Get angular velocity, 1 byte, signed.
00001000  =00000004                 45  GET_SPRITE                      EQU         4   ;Go to sprite table and grip up this offset. 1 byte, unsigned. Sprite table holds a table of top left offsets and indexes that load these top left corners.
00001000  =00000005                 46  GET_PATH_INSTRUCTION            EQU         5   ;Get the offset for the Path that this object is following. 1 byte unsigned.
00001000  =00000006                 47  GET_PATH_INSTRUCTION_OFFSET     EQU         6   ;Get the offset of the offset (what stage it is on). 1 byte unsigned (if they go longer, use the FD command to link them.
00001000  =00000007                 48  GET_POWER                       EQU         7   ;Get the power of the object. Power changes between each entity. It could be damage they deal on contact, piercing, number of bombs, etc. 1 byte
00001000  =00000008                 49  GET_POSITION                    EQU         8   ;Get the top left of the object on screen. 1 long word. Vec2
00001000  =0000000C                 50  GET_SIZE                        EQU         12  ;Get the width and height of the object on scree. 1 long word. Vec2
00001000  =00000010                 51  GET_COLLISION_BOX_TL            EQU         16  ;Get the top left of the collision box. 1 long word. Vec2. it is an offset from the top left corner.
00001000  =00000014                 52  GET_COLLISION_BOX_BOUNDS        EQU         20  ;Get the bounds of the collision box. 1 long word. Vec2.
00001000  =00000016                 53  GET_HEALTH                      EQU         22  ;Get the health of the object. 1 word, will have to check and see.
00001000  =00000018                 54  GET_INFO                        EQU         24  ;1 word. Most Significant Byte = "are they active" (FF = true, 00 = false). Least Significant Byte = $0("What quadrant and subquadrant are they in?")
00001000  =0000001A                 55  GET_ENTITY_TYPE                 EQU         26  ;Most significant byte: What variation of that eneity. Least significant byte: what type of entity                                               
00001000  =0000001C                 56  GET_ENTITY_PATH_ADDRESS         EQU         28  ;OR Path Handler address? The address where this entity's data is stored. 1 long.
00001000                            57  
00001000                            58  
00001000                            59  
00001000                            60  
00001000                            61  
00001000                            62  
00001000                            63  
00001000  =002A6387                 64  COLOR_PLAYER_BULLET_OUTER       EQU         $2A6387
00001000  =00E3F4FF                 65  COLOR_PLAYER_BULLET_INNER       EQU         $E3F4FF
00001000  =00000058                 66  TRAP_PLAYER_BULLET_SHAPE        EQU         88
00001000                            67  
00001000                            68  
00001000  =0000004B                 69  MAX_NUM_ENTITIES                EQU     75
00001000  =00000001                 70  MAX_NUM_PLAYERS                 EQU     1
00001000  =00000008                 71  MAX_NUM_PLAYER_BULLETS          EQU     8
00001000  =00000020                 72  MAX_NUM_ENEMIES                 EQU     32
00001000  =0000001E                 73  MAX_NUM_ENEMY_BULLETS           EQU     30
00001000  =00000001                 74  MAX_NUM_PLAYER_SWORD            EQU     1
00001000  =00000003                 75  MAX_NUM_PICKUPS                 EQU     3
00001000                            76  
00001000  =00000020                 77  ENTITY_SIZE                     EQU     32
00001000                            78  
00001000                            79  
00001000                            80  
00001000                            81  
00001000  =000002EC                 82  HUD_OFFSET_X                    EQU     748
00001000  =FFFFFFFC                 83  HUD_OFFSET_Y                    EQU     -4
00001000                            84  
00001000  =00000046                 85  HUD_WIDTH                       EQU     70
00001000  =000000F0                 86  HUD_HEIGHT                      EQU     240
00001000                            87  
00001000                            88  
00001000                            89  
00001000  =00000400                 90  SCREEN_SIZE_PIXELS_X        EQU     1024
00001000  =000003C0                 91  SCREEN_SIZE_PIXELS_Y        EQU     960
00001000                            92  
00001000                            93  
00001000  =00000000                 94  GAME_STATE_MAIN_MENU        EQU     0 
00001000  =00000001                 95  GAME_STATE_PLAYING          EQU     1
00001000  =00000002                 96  GAME_STATE_PAUSED           EQU     2
00001000  =00000003                 97  GAME_STATE_HI_SCORE         EQU     3
00001000                            98  
00001000                            99  
00001000  =000000FF                100  STATUS_ALIVE                EQU     $FF
00001000  =00000000                101  STATUS_DEAD                 EQU     $00
00001000                           102  
00001000                           103  
00001000                           104  
00001000                           105  
00001000                           106  
00001000                           107  
00001000                           108  
00001000                           109  
00001000                           110  -------------------- end include --------------------
00001000                           111      INCLUDE                             'src/Graphics.X68'
00001000                           112     
00001000                           113  
00001000                           114  SPR_HUD      INCBIN      'bmps/hud.bmp'
0001170A                           115  SPR_SLIME    INCBIN      'bmps/slime.bmp'    
00011B94                           116  SPR_PLAYER   INCBIN      'bmps/character.bmp'
00012C1E                           117  
00012C1E  =00000058                118  TRAP_ELLIPSE_DRAW      EQU     88
00012C1E  =00000057                119  TRAP_RECT_DRAW         EQU     87
00012C1E                           120  
00012C1E                           121  
00012C1E                           122  
00012C1E                           123  ;sprite table. Each enemy's sprite sheet is loaded in here.
00012C1E                           124  GET_ENEMY:
00012C1E                           125      ds.l    SPR_SLIME
00058846                           126  
00058846                           127  
00058846                           128  
00058846                           129  DRAW_PLAYER:
00058846                           130  
00058846                           131      
00058846  2F07                     132      move.l  d7, -(SP)
00058848                           133      
00058848  223C 00D08080            134      move.l  #$00D08080, d1
0005884E  7050                     135      move.l  #80, d0
00058850  4E4F                     136      trap    #15
00058852  7051                     137      move.l  #81, d0
00058854  4E4F                     138      trap    #15
00058856  7057                     139      move.l  #TRAP_RECT_DRAW,d0
00058858                           140      
00058858  2A28 0008                141      move.l  GET_POSITION(a0), d5
0005885C                           142      
0005885C  2C3C 00050003            143      move.l  #$00050003, d6
00058862  2E3C 00020004            144      move.l  #$00020004, d7
00058868  4EB9 00058A6E            145      jsr DRAW_SCALED_FROM_POSITION
0005886E                           146      
0005886E  2C3C 00050000            147      move.l  #$00050000, d6
00058874  2E3C 00020002            148      move.l  #$00020002, d7
0005887A  4EB9 00058A6E            149      jsr DRAW_SCALED_FROM_POSITION
00058880                           150      
00058880  2C3C 00070001            151      move.l  #$00070001, d6
00058886  2E3C 00030002            152      move.l  #$00030002, d7
0005888C  4EB9 00058A6E            153      jsr DRAW_SCALED_FROM_POSITION
00058892                           154      
00058892  2C3C 000A0002            155      move.l  #$000A0002, d6
00058898  2E3C 00060006            156      move.l  #$00060006, d7
0005889E  4EB9 00058A6E            157      jsr DRAW_SCALED_FROM_POSITION
000588A4                           158      
000588A4  2C3C 00040004            159      move.l  #$00040004, d6
000588AA  2E3C 00040002            160      move.l  #$00040002, d7
000588B0  4EB9 00058A6E            161      jsr DRAW_SCALED_FROM_POSITION
000588B6                           162      
000588B6  2C3C 00050008            163      move.l  #$00050008, d6
000588BC  2E3C 00020002            164      move.l  #$00020002, d7
000588C2  4EB9 00058A6E            165      jsr DRAW_SCALED_FROM_POSITION
000588C8                           166      
000588C8  2C3C 00070007            167      move.l  #$00070007, d6
000588CE  2E3C 00030002            168      move.l  #$00030002, d7
000588D4  4EB9 00058A6E            169      jsr DRAW_SCALED_FROM_POSITION
000588DA                           170      
000588DA  2C3C 00090003            171      move.l  #$00090003, d6
000588E0  2E3C 00030004            172      move.l  #$00030004, d7
000588E6  4EB9 00058A6E            173      jsr DRAW_SCALED_FROM_POSITION
000588EC                           174      
000588EC                           175      
000588EC                           176      
000588EC  2E1F                     177      move.l  (SP)+, d7
000588EE  4E75                     178      rts
000588F0                           179  
000588F0                           180  
000588F0                           181  
000588F0                           182  
000588F0                           183  
000588F0                           184  
000588F0                           185  DRAW_SLIME:
000588F0  2F07                     186      move.l  d7, -(SP)
000588F2  223C 00FFFFFF            187      move.l  #$00FFFFFF, d1
000588F8  7050                     188      move.l  #80, d0
000588FA  4E4F                     189      trap    #15
000588FC  7051                     190      move.l  #81, d0
000588FE  4E4F                     191      trap    #15
00058900                           192      
00058900  7057                     193      move.l  #TRAP_RECT_DRAW, d0
00058902  2A28 0008                194      move.l  GET_POSITION(a0), d5
00058906  7C02                     195      move.l  #$00000002, d6
00058908  2E3C 00090006            196      move.l  #$00090006, d7
0005890E  4EB9 00058A6E            197      jsr DRAW_SCALED_FROM_POSITION
00058914  2C3C 00020000            198      move.l  #$00020000, d6
0005891A  2E3C 0009000B            199      move.l  #$0009000B, d7
00058920  4EB9 00058A6E            200      jsr DRAW_SCALED_FROM_POSITION
00058926                           201      
00058926  4281                     202      clr.l   d1
00058928  7050                     203      move.l  #80, d0
0005892A  4E4F                     204      trap    #15
0005892C  7051                     205      move.l  #81, d0
0005892E  4E4F                     206      trap    #15
00058930                           207      
00058930  7057                     208      move.l  #TRAP_RECT_DRAW, d0
00058932  2C3C 00030002            209      move.l  #$00030002, d6
00058938  2E3C 00020002            210      move.l  #$00020002, d7
0005893E  4EB9 00058A6E            211      jsr DRAW_SCALED_FROM_POSITION
00058944  2C3C 00050008            212      move.l  #$00050008, d6
0005894A  4EB9 00058A6E            213      jsr DRAW_SCALED_FROM_POSITION
00058950  2C3C 00060004            214      move.l  #$00060004, d6
00058956  2E3C 00010002            215      move.l  #$00010002, d7
0005895C  4EB9 00058A6E            216      jsr DRAW_SCALED_FROM_POSITION
00058962  2E1F                     217      move.l  (SP)+, d7
00058964  4E75                     218      rts
00058966                           219      
00058966                           220  DRAW_ROBOT:
00058966                           221  
00058966  4E75                     222      rts
00058968                           223      
00058968                           224  ;Requires (a0) to be the location of the bullet in memory
00058968                           225  DRAW_PLAYER_BULLET:
00058968                           226      
00058968  103C 0050                227       move.b  #80, d0
0005896C  223C 002A6387            228       move.l  #COLOR_PLAYER_BULLET_OUTER, d1
00058972  4E4F                     229       trap    #15    
00058974                           230                  
00058974  103C 0051                231       move.b  #81, d0
00058978  223C 00E3F4FF            232       move.l  #COLOR_PLAYER_BULLET_INNER, d1
0005897E  4E4F                     233       trap    #15
00058980                           234  
00058980                           235  
00058980                           236  
00058980  3428 0008                237      move.w  GET_POSITION(a0), d2     ;move y position to d2 and d4
00058984  3802                     238      move.w  d2, d4
00058986  3228 000A                239      move.w  (GET_POSITION+2)(a0), d1 ;move x and 
0005898A  3601                     240      move.w  d1, d3
0005898C  2028 000C                241      move.l  GET_SIZE(a0), d0
00058990  D640                     242      add.w   d0, d3
00058992  4840                     243      swap    d0
00058994  D840                     244      add.w   d0, d4
00058996  4280                     245      clr.l   d0
00058998  103C 0058                246      move.b  #TRAP_PLAYER_BULLET_SHAPE, d0     ;make them circles!
0005899C  4EB9 00058A96            247      jsr DRAW_SCALED_SHAPE
000589A2  4E75                     248      rts
000589A4                           249  
000589A4                           250  DRAW_ENEMY_BULLET:
000589A4  3428 0008                251      move.w  GET_POSITION(a0), d2     ;move y position to d2 and d4
000589A8  3802                     252      move.w  d2, d4
000589AA  3228 000A                253      move.w  (GET_POSITION+2)(a0), d1 ;move x and 
000589AE  3601                     254      move.w  d1, d3
000589B0  2028 000C                255      move.l  GET_SIZE(a0), d0
000589B4  D640                     256      add.w   d0, d3
000589B6  4840                     257      swap    d0
000589B8  D840                     258      add.w   d0, d4
000589BA  4280                     259      clr.l   d0
000589BC  103C 0058                260      move.b  #TRAP_PLAYER_BULLET_SHAPE, d0     ;make them circles!
000589C0  4EB9 00058A96            261      jsr DRAW_SCALED_SHAPE
000589C6  4E75                     262      rts
000589C8                           263  
000589C8                           264  ;4(SP) = 
000589C8                           265  DRAW_SEVEN_SEGMENT:
000589C8                           266  
000589C8                           267  
000589C8                           268  
000589C8                           269  
000589C8  4E75                     270      rts
000589CA                           271  
000589CA                           272  
000589CA= 03                       273  COLOR_BANK_LENGTH       dc.b    3
000589CB                           274  
000589CB                           275  COLOR_BANK
000589CC= 00FF0000 0000FF00 ...    276      dc.l    $00FF0000, $0000FF00, $000000FF 
000589D8                           277      
000589D8                           278  DRAW_FUNCTIONS:
000589D8= 00058846 000588F0 ...    279      dc.l    DRAW_PLAYER, DRAW_SLIME, DRAW_ROBOT, DRAW_PLAYER_BULLET
000589E8                           280  
000589E8                           281  -------------------- end include --------------------
000589E8                           282      INCLUDE                             'src/Operations.X68'
000589E8                           283  
000589E8  =00000000                284  GS_PLAY_TOP_LEFT_X      EQU     0
000589E8  =00000000                285  GS_PLAY_TOP_LEFT_Y      EQU     0
000589E8                           286  
000589E8  =000000BA                287  GS_PLAY_BOT_RIGHT_X     EQU     186
000589E8  =000000F0                288  GS_PLAY_BOT_RIGHT_Y     EQU     240
000589E8                           289  
000589E8  =00000040                290  GS_PAUSE_TOP_LEFT_X     EQU     64
000589E8  =0000003C                291  GS_PAUSE_TOP_LEFT_Y     EQU     60
000589E8                           292  
000589E8  =000000C0                293  GS_PAUSE_BOT_RIGHT_X    EQU     192
000589E8  =000000B4                294  GS_PAUSE_BOT_RIGHT_Y    EQU     180
000589E8                           295  
000589E8                           296  
000589E8                           297  
000589E8                           298  
000589E8                           299  CLEAN_SCREEN:
000589E8                           300  
000589E8                           301      ;swap buffer
000589E8  303C 005E                302      move.w  #94, d0
000589EC  4E4F                     303      trap    #15
000589EE                           304  
000589EE                           305      ;drawing a black block over part of the screen to "clear it"
000589EE  4281                     306      clr.l   d1
000589F0  303C 0050                307      move.w  #80, d0
000589F4  4E4F                     308      trap    #15
000589F6  303C 0051                309      move.w  #81,d0
000589FA  4E4F                     310      trap    #15
000589FC                           311      
000589FC  41F9 0005B480            312      lea GAME_STATE, a0
00058A02  1010                     313      move.b  (a0), d0
00058A04  0C00 0001                314      cmpi.b  #GAME_STATE_PLAYING, d0
00058A08  6700 001E                315      beq     CLEAN_PLAYING_SCREEN
00058A0C  0C00 0002                316      cmpi.b  #GAME_STATE_PAUSED, d0
00058A10  6700 0038                317      beq     CLEAN_PAUSE_SCREEN
00058A14  0C00 0003                318      cmpi.b  #GAME_STATE_HI_SCORE, d0
00058A18  6700 0050                319      beq     CLEAN_HI_SCORE_SCREEN
00058A1C                           320      
00058A1C                           321      CLEAN_MENU_SCREEN:
00058A1C  103C 000B                322          move.b  #11, d0
00058A20  323C FF00                323          move.w  #$FF00, d1
00058A24  4E4F                     324          trap    #15
00058A26  4E75                     325          rts
00058A28                           326      CLEAN_PLAYING_SCREEN:
00058A28  4E75                     327          rts
00058A2A  323C 0000                328          move.w  #GS_PLAY_TOP_LEFT_X, d1
00058A2E  343C 0000                329          move.w  #GS_PLAY_TOP_LEFT_Y, d2 
00058A32  363C 00BA                330          move.w  #GS_PLAY_BOT_RIGHT_X, d3
00058A36  383C 00F0                331          move.w  #GS_PLAY_BOT_RIGHT_Y, d4
00058A3A                           332          
00058A3A  E549                     333          lsl.w   #2, d1
00058A3C  E54A                     334          lsl.w   #2, d2
00058A3E  E54B                     335          lsl.w   #2, d3
00058A40  E54C                     336          lsl.w   #2, d4
00058A42  103C 0057                337          move.b  #87, d0
00058A46  4E4F                     338          trap    #15
00058A48  4E75                     339          rts
00058A4A                           340      CLEAN_PAUSE_SCREEN:
00058A4A  323C 0040                341          move.w  #GS_PAUSE_TOP_LEFT_X, d1
00058A4E  343C 003C                342          move.w  #GS_PAUSE_TOP_LEFT_Y, d2
00058A52  363C 00C0                343          move.w  #GS_PAUSE_BOT_RIGHT_X, d3
00058A56  383C 00B4                344          move.w  #GS_PAUSE_BOT_RIGHT_Y, d4
00058A5A                           345          
00058A5A  E549                     346          lsl.w   #2, d1
00058A5C  E54A                     347          lsl.w   #2, d2
00058A5E  E54B                     348          lsl.w   #2, d3
00058A60  E54C                     349          lsl.w   #2, d4
00058A62  103C 0057                350          move.b  #87, d0
00058A66  4E4F                     351          trap    #15
00058A68  4E75                     352          rts
00058A6A                           353      CLEAN_HI_SCORE_SCREEN:
00058A6A                           354          ;I'll figure something out here... eventually...
00058A6A  4E75                     355          rts
00058A6C                           356      
00058A6C                           357      
00058A6C                           358      
00058A6C                           359  UPDATE_SCORE:
00058A6C  4E75                     360      rts
00058A6E                           361      
00058A6E                           362  
00058A6E                           363  ;d5 is the position, d6 is the offset, d7 is the size, trap code is already set.
00058A6E                           364  
00058A6E                           365  
00058A6E                           366  DRAW_SCALED_FROM_POSITION:
00058A6E  3206                     367      move.w  d6, d1      ;lo x
00058A70  3606                     368      move.w  d6, d3      ;hi x
00058A72  5343                     369      subi.w  #1, d3
00058A74  4846                     370      swap.w  d6      
00058A76  3406                     371      move.w  d6, d2      ;lo y
00058A78  3806                     372      move.w  d6, d4      ;hi y
00058A7A  5344                     373      subi.w  #1, d4
00058A7C  D647                     374      add.w   d7, d3      ;adding x size
00058A7E  4847                     375      swap    d7
00058A80  D847                     376      add.w   d7, d4      ;adding y size
00058A82  D245                     377      add.w   d5, d1      ;adding offsets
00058A84  D645                     378      add.w   d5, d3
00058A86  4845                     379      swap    d5
00058A88  D445                     380      add.w   d5, d2
00058A8A  D845                     381      add.w   d5, d4
00058A8C  4845                     382      swap    d5
00058A8E  4EB9 00058A96            383      jsr DRAW_SCALED_SHAPE
00058A94  4E75                     384      rts
00058A96                           385  
00058A96                           386  ;d0, d1, d2, d3, and d4 are set. This just multiplies their sizes by the pixel size and puts them in the right spot.
00058A96                           387  
00058A96                           388  
00058A96                           389  
00058A96                           390  DRAW_SCALED_SHAPE:
00058A96  E589                     391      lsl.l   #PIXEL_SHIFT, d1
00058A98  E58A                     392      lsl.l   #PIXEL_SHIFT, d2 
00058A9A  E58B                     393      lsl.l   #PIXEL_SHIFT, d3 
00058A9C  E58C                     394      lsl.l   #PIXEL_SHIFT, d4 
00058A9E  4E4F                     395      trap    #15
00058AA0  4E75                     396      rts
00058AA2                           397  
00058AA2                           398  ;4(SP) is the reference to the object to inval.
00058AA2                           399  INVAL_OBJECT:
00058AA2  206F 0004                400      move.l  4(SP), a0
00058AA6  7050                     401      move.l  #80, d0
00058AA8  4281                     402      clr.l   d1
00058AAA  4E4F                     403      trap    #15
00058AAC  103C 0051                404      move.b  #81, d0
00058AB0  4E4F                     405      trap    #15
00058AB2                           406          
00058AB2  103C 0057                407      move.b  #87, d0
00058AB6                           408          
00058AB6                           409          
00058AB6  3428 0008                410      move.w  GET_POSITION(a0), d2
00058ABA  3802                     411      move.w  d2, d4
00058ABC  3228 000A                412      move.w  (GET_POSITION+2)(a0), d1
00058AC0  3601                     413      move.w  d1, d3
00058AC2  D868 000C                414      add.w   GET_SIZE(a0), d4
00058AC6  D668 000E                415      add.w   (GET_SIZE+2)(a0), d3 
00058ACA                           416          
00058ACA  4EB9 00058A96            417      jsr DRAW_SCALED_SHAPE
00058AD0  4E75                     418      rts
00058AD2                           419  
00058AD2                           420  ;a0 is the location of the entity in memory, d0 is their new position. with X being the least significant word.
00058AD2                           421  SET_COLLISION_ZONE:
00058AD2  2028 0008                422      move.l  GET_POSITION(a0), d0
00058AD6  4204                     423      clr.b   d4
00058AD8  4286                     424      clr.l   d6
00058ADA  4285                     425      clr.l   d5
00058ADC  3C00                     426      move.w  d0, d6      ;x
00058ADE  E54E                     427      lsl.w   #2, d6
00058AE0  4840                     428      swap    d0
00058AE2  3A00                     429      move.w  d0, d5      ;y
00058AE4  E54D                     430      lsl.w   #2, d5      
00058AE6  8CFC 00BA                431      divu    #STAGE_BORDER_X_MAX, d6
00058AEA  8AFC 00F0                432      divu    #STAGE_BORDER_Y_MAX, d5
00058AEE                           433          
00058AEE  1805                     434      move.b  d5, d4
00058AF0  E50C                     435      lsl.b   #2, d4
00058AF2  D806                     436      add.b  d6, d4    
00058AF4  1144 0019                437      move.b  d4, (GET_INFO+1)(a0)
00058AF8  4E75                     438      rts
00058AFA                           439      
00058AFA                           440   TEMP_SCALE_X:
00058AFA  E54B                     441      lsl.w   #2, d3
00058AFC  E549                     442      lsl.w   #2, d1
00058AFE  4E4F                     443      trap    #15
00058B00  E44B                     444      lsr.w   #2, d3
00058B02  E449                     445      lsr.w   #2, d1
00058B04  4E75                     446      rts
00058B06                           447      
00058B06                           448   TEMP_SCALE_Y:
00058B06  E54A                     449      lsl.w   #2, d2
00058B08  E54C                     450      lsl.w   #2, d4
00058B0A  4E4F                     451      trap    #15
00058B0C  E44A                     452      lsr.w   #2, d2
00058B0E  E44C                     453      lsr.w   #2, d4
00058B10  4E75                     454      rts
00058B12                           455  
00058B12                           456  DRAW_GRID_LINES:
00058B12  103C 0050                457      move.b  #80, d0
00058B16  223C 00808080            458      move.l  #$00808080, d1
00058B1C  4E4F                     459      trap    #15
00058B1E                           460      
00058B1E  103C 0054                461      move.b  #84, d0
00058B22  343C 0000                462      move.w  #0, d2
00058B26  383C 03C0                463      move.w  #(STAGE_BORDER_Y_MAX<<2), d4
00058B2A                           464      
00058B2A                           465      
00058B2A  363C 00BA                466      move.w  #STAGE_BORDER_X_MAX, d3
00058B2E                           467      
00058B2E                           468     
00058B2E                           469      
00058B2E                           470      
00058B2E  E24B                     471      lsr.w   #1, d3
00058B30  3203                     472      move.w  d3, d1
00058B32                           473      
00058B32  4EB9 00058AFA            474      jsr TEMP_SCALE_X
00058B38                           475      
00058B38  3A03                     476      move.w  d3, d5
00058B3A  E24B                     477      lsr.w   #1, d3
00058B3C  3203                     478      move.w  d3, d1
00058B3E                           479     
00058B3E  4EB9 00058AFA            480      jsr TEMP_SCALE_X
00058B44                           481      
00058B44  D645                     482      add.w   d5, d3
00058B46  3203                     483      move.w  d3, d1
00058B48                           484      
00058B48  4EB9 00058AFA            485      jsr TEMP_SCALE_X
00058B4E                           486      
00058B4E  323C 0000                487      move.w  #0, d1
00058B52  363C 02E8                488      move.w  #(STAGE_BORDER_X_MAX<<2), d3
00058B56                           489      
00058B56  383C 00F0                490      move.w  #STAGE_BORDER_Y_MAX, d4
00058B5A                           491      
00058B5A                           492  
00058B5A                           493      
00058B5A  E24C                     494      lsr.w   #1, d4
00058B5C  3404                     495      move.w  d4, d2
00058B5E  4EB9 00058B06            496      jsr TEMP_SCALE_Y
00058B64                           497      
00058B64  3A04                     498      move.w  d4, d5
00058B66  E24C                     499      lsr.w   #1, d4
00058B68  3404                     500      move.w  d4, d2
00058B6A                           501      
00058B6A  4EB9 00058B06            502      jsr TEMP_SCALE_Y
00058B70                           503      
00058B70  D845                     504      add.w   d5, d4
00058B72  3404                     505      move.w  d4, d2
00058B74  4EB9 00058B06            506      jsr TEMP_SCALE_Y
00058B7A  4E75                     507      rts
00058B7C                           508      
00058B7C                           509      
00058B7C                           510      
00058B7C                           511  UPDATE_DELTA_TIME:
00058B7C  41F9 0005B478            512      lea     TIME_LAST_UPDATE, a0
00058B82  43F9 0005B47C            513      lea     DELTA_TIME, a1
00058B88  2410                     514      move.l  (a0), d2        ;storing old time, and subracting it from new time.
00058B8A  103C 0008                515      move.b  #8, d0
00058B8E  4E4F                     516      trap    #15
00058B90  2081                     517      move.l  d1, (a0)
00058B92  9282                     518      sub.l   d2, d1
00058B94  2281                     519      move.l  d1, (a1)
00058B96  4E75                     520      rts
00058B98                           521      
00058B98                           522       
00058B98                           523  
00058B98                           524  -------------------- end include --------------------
00058B98                           525      INCLUDE                             'src/Pathing.X68'
00058B98                           526  
00058B98  =00000010                527  PATH_HANDLER_SIZE       EQU     16
00058B98                           528  
00058B98  =00000000                529  GET_PATH_ADDR           EQU     0
00058B98  =00000004                530  GET_PH_ACC              EQU     4
00058B98  =00000006                531  GET_PH_VEL              EQU     6
00058B98  =00000008                532  GET_PH_DEL_THET         EQU     8
00058B98  =0000000A                533  GET_PH_THETA            EQU     10
00058B98  =0000000C                534  GET_PH_FLAG             EQU     12
00058B98  =0000000E                535  GET_PATH_NODE_OFFSET    EQU     14
00058B98                           536  
00058B98  =00000004                537  THETA_FRAC_BITS         EQU     4
00058B98  =00000006                538  SPEED_FRAC_BITS         EQU     6
00058B98  =00000003                539  DELTA_TIME_FRAC_BITS    EQU     3
00058B98                           540  
00058B98  =00008000                541  ENTITY_VEL_MAX   EQU     $8000
00058B98                           542  
00058B98                           543  
00058B98                           544  ;Clears all path handlers to have cleared flags and everything else is set to FFFF
00058B98                           545  CLEAR_PATH_HANDLERS:
00058B98  41F9 00058D42            546      lea PATH_HANDLER_BANK, a0
00058B9E  1E3C 004A                547      move.b  #(MAX_NUM_ENTITIES-1), d7
00058BA2  1C3C 0001                548      move.b  #1, d6
00058BA6  203C 0000FFFF            549      move.l  #$0000FFFF, d0
00058BAC  72FF                     550      move.l  #$FFFFFFFF, d1
00058BAE                           551      CLEAR_PATH_HANDLER_LOOP:
00058BAE  20C1                     552      move.l  d1, (a0)+
00058BB0  20C1                     553      move.l  d1, (a0)+
00058BB2  20C1                     554      move.l  d1, (a0)+
00058BB4  20C0                     555      move.l  d0, (a0)+
00058BB6  9E06                     556      sub.b   d6, d7
00058BB8  6CF4                     557      bge CLEAR_PATH_HANDLER_LOOP
00058BBA  4E75                     558      rts
00058BBC                           559      
00058BBC                           560      
00058BBC                           561  
00058BBC                           562      
00058BBC                           563  
00058BBC                           564  ;4(SP) is the path offset                   >>Consider making equates
00058BBC                           565  ;8(SP) is initial Speeds
00058BBC                           566  ;12(SP) is initial thetas
00058BBC                           567  ;16(SP) is the object that owns this path handler.
00058BBC                           568  FIND_NEW_PATH_HANDLER:
00058BBC  4286                     569      clr.l   d6
00058BBE  4287                     570      clr.l   d7
00058BC0  43F9 0005921A            571      lea     PATH_BANK, a1
00058BC6  2E2F 0004                572      move.l  4(SP), d7
00058BCA  E58F                     573      lsl.l   #2, d7
00058BCC  2831 7000                574      move.l  (a1, d7), d4    ;this is the address of the path to follow, stored in d4
00058BD0  43F9 00058D42            575      lea     PATH_HANDLER_BANK, a1
00058BD6  1E3C 004A                576      move.b  #(MAX_NUM_ENTITIES-1), d7
00058BDA  1C3C 0010                577      move.b  #PATH_HANDLER_SIZE, d6
00058BDE  E98F                     578      lsl.l   #4, d7          ;size of a path handler is 16 bytes
00058BE0                           579      
00058BE0                           580      FNPH_LOOP:
00058BE0  1A31 700C                581      move.b  (GET_PH_FLAG, a1,d7), d5
00058BE4  6700 000A                582      beq     FOUND_NEW_PATH              ;if the zero flag is set, you moved 0000, which means "not set".
00058BE8  9E86                     583      sub.l   d6, d7
00058BEA  6CF4                     584      bge FNPH_LOOP
00058BEC  4207                     585      clr.b   d7
00058BEE  4E75                     586      rts  
00058BF0                           587      
00058BF0                           588      ;Set timer for updating the Current Path Node
00058BF0                           589      ;with input1 being the address, input 2 being the entity,
00058BF0                           590      ;the function being NEXT_PATH_NODE, and the time being the timer.
00058BF0                           591      FOUND_NEW_PATH:  
00058BF0  D3C7                     592      adda.l  d7, a1                      ;a1 is the address of the new path handler. Instantiating it here.
00058BF2  137C 00FF 000C           593      move.b  #$FF,   GET_PH_FLAG(a1)
00058BF8  2344 0000                594      move.l  d4,     GET_PATH_ADDR(a1)
00058BFC  337C 0000 000E           595      move.w  #0,     GET_PATH_NODE_OFFSET(a1)
00058C02  236F 0008 0004           596      move.l  8(SP),GET_PH_ACC(a1)
00058C08  236F 000C 0008           597      move.l  12(SP),GET_PH_DEL_THET(a1)
00058C0E                           598      
00058C0E  2469 0000                599      move.l  GET_PATH_ADDR(a1), a2
00058C12  4240                     600      clr.w   d0
00058C14  302A 0002                601      move.w  GET_PATHNODE_TIME_ELAPSED(a2), d0
00058C18  2F09                     602      move.l  a1, -(SP)           ;arg2 = Path Handler to update
00058C1A  2F2F 0010                603      move.l  16(SP), -(SP)       ;arg1 = entity
00058C1E  4DF9 0005922E            604      lea     NEXT_PATH_NODE, a6                      
00058C24  2F0E                     605      move.l  a6, -(SP)   ;this = function            , 8sp
00058C26  2F00                     606      move.l  d0, -(SP)               ; Value for Timer, 4sp
00058C28  4EB9 0005A640            607      jsr     SET_TIMER
00058C2E  DFFC 0000000C            608      adda.l  #12, SP
00058C34  225F                     609      move.l  (SP)+, a1
00058C36                           610      
00058C36  4E75                     611      rts
00058C38                           612  
00058C38                           613                 
00058C38                           614  ;let 4(SP) be a reference to the entity calling it
00058C38                           615  PATH_UPDATES:
00058C38  4282                     616      clr.l   d2
00058C3A  4281                     617      clr.l   d1
00058C3C  4280                     618      clr.l   d0
00058C3E  41F9 0005B47C            619      lea DELTA_TIME, a0
00058C44  2010                     620      move.l  (a0), d0
00058C46  206F 0004                621      move.l  4(SP), a0
00058C4A  2268 001C                622      move.l  GET_ENTITY_PATH_ADDRESS(a0), a1
00058C4E                           623      
00058C4E                           624      
00058C4E                           625      
00058C4E                           626  
00058C4E                           627      
00058C4E                           628      
00058C4E                           629      ;UPDATING VELOCITY BASED ON ACCELERATION
00058C4E  3229 0004                630      move.w  GET_PH_ACC(a1), d1
00058C52  C2C0                     631      mulu.w  d0, d1
00058C54  E689                     632      lsr.l   #DELTA_TIME_FRAC_BITS, d1
00058C56  EC89                     633      lsr.l   #SPEED_FRAC_BITS, d1
00058C58  3429 0006                634      move.w  GET_PH_VEL(a1), d2
00058C5C  D441                     635      add.w   d1, d2      
00058C5E  0C42 8000                636      cmpi.w  #ENTITY_VEL_MAX, d2
00058C62  6500 0012                637      blo     NO_PH_VEL_CLAMP                     ;if the unsigned value is less than the velocity clamp, then it's already clamped. Otherwise, it is either an underflow or overflow.
00058C66                           638      ;Stop accelerating, maintain speed
00058C66  343C 0000                639      move.w  #0, d2
00058C6A  0C41 0000                640      cmpi.w  #0, d1  
00058C6E  6D00 0006                641      blt     ENTITY_VELOCITY_UNDERFLOW       ;if d1 is negative, then that means that you underflowed, so set velocity to 0.
00058C72  343C 8000                642      move.w  #ENTITY_VEL_MAX, d2
00058C76                           643      ENTITY_VELOCITY_UNDERFLOW:
00058C76                           644      NO_PH_VEL_CLAMP:
00058C76  3342 0006                645      move.w  d2, GET_PH_VEL(a1)
00058C7A                           646      
00058C7A                           647      
00058C7A                           648      
00058C7A                           649      ;UPDATING THETA BASED ON DELTA THETA and clamp.
00058C7A  3229 0008                650      move.w  GET_PH_DEL_THET(a1), d1
00058C7E  C2C0                     651      mulu.w  d0, d1            
00058C80  E649                     652      lsr.w   #DELTA_TIME_FRAC_BITS, d1
00058C82  3429 000A                653      move.w  GET_PH_THETA(a1), d2
00058C86                           654      
00058C86  D441                     655      add.w   d1, d2
00058C88                           656      
00058C88  84FC 1680                657      divu    #ANGLE_MAX, d2
00058C8C  4242                     658      clr.w   d2
00058C8E  4842                     659      swap    d2
00058C90                           660      
00058C90                           661      THETA_BELOW_MAX:
00058C90                           662      
00058C90  3342 000A                663      move.w  d2, GET_PH_THETA(a1)
00058C94  E88A                     664      lsr.l   #THETA_FRAC_BITS, d2        ;
00058C96  2F02                     665      move.l  d2, -(SP)
00058C98                           666      
00058C98                           667      ;Getting the movement vector and storing it in d2(X) and d4(Y)
00058C98  4EB9 00059650            668      jsr     GET_VECTOR              
00058C9E  281F                     669      move.l  (SP)+, d4               
00058CA0  3404                     670      move.w  d4, d2
00058CA2  4244                     671      clr.w   d4
00058CA4  4844                     672      swap    d4                      
00058CA6                           673      
00058CA6  41F9 0005B47C            674      lea DELTA_TIME, a0
00058CAC  2010                     675      move.l  (a0), d0
00058CAE  206F 0004                676      move.l  4(SP), a0
00058CB2  2268 001C                677      move.l  GET_ENTITY_PATH_ADDRESS(a0), a1
00058CB6                           678      
00058CB6  4281                     679      clr.l   d1
00058CB8  4283                     680      clr.l   d3
00058CBA                           681  
00058CBA                           682      ;UPDATING POSITION  
00058CBA                           683      
00058CBA  2628 0008                684      move.l  GET_POSITION(a0), d3
00058CBE                           685      
00058CBE                           686      
00058CBE                           687      
00058CBE  3229 0006                688      move.w  GET_PH_VEL(a1), d1              ;Velocity in d1
00058CC2                           689      
00058CC2  C5C1                     690      muls.w  d1, d2                        ;Velocity * movement vector.x(with 2 frac bits)
00058CC4  EC8A                     691      lsr.l   #SPEED_FRAC_BITS, d2            ;bit shift it right to account for built in speed fractional bits
00058CC6                           692                ;bit shift it right to account for built in fractional bits for the vector
00058CC6  C5C0                     693      muls.w  d0, d2                          ;x movement * delta time, multiply to account for delta time.
00058CC8  E88A                     694      lsr.l   #VECTOR_FRAC_BITS, d2
00058CCA  E68A                     695      lsr.l   #DELTA_TIME_FRAC_BITS, d2
00058CCC                           696  
00058CCC  4285                     697      clr.l   d5
00058CCE  4286                     698      clr.l   d6
00058CD0  3C02                     699      move.w  d2, d6                         
00058CD2  DC43                     700      add.w   d3, d6                          ;get new x in d6
00058CD4  3A3C 003C                701      move.w  #ENTITY_OFF_SCREEN_MAX, d5      ;take max off screen in d5
00058CD8  DC45                     702      add.w   d5, d6                          ;add to position.
00058CDA  6D00 0048                703      blt     TOO_FAR_OFF_SCREEN              ;if this "new position" is greater than 0, then you are beyond the minimum.
00058CDE                           704      
00058CDE                           705      
00058CDE  9C45                     706      sub.w   d5, d6                          ;subtract minimum twice and see if it is below the max x border
00058CE0  9C45                     707      sub.w   d5, d6
00058CE2  0C46 00BA                708      cmpi.w  #STAGE_BORDER_X_MAX, d6
00058CE6  6E00 003C                709      bgt     TOO_FAR_OFF_SCREEN
00058CEA                           710      
00058CEA  C9C1                     711      muls.w  d1, d4                          ;Same as X above
00058CEC  EC8C                     712      lsr.l   #SPEED_FRAC_BITS, d4
00058CEE  C9C0                     713      muls.w  d0, d4
00058CF0  E88C                     714      lsr.l   #VECTOR_FRAC_BITS, d4
00058CF2  E68C                     715      lsr.l   #DELTA_TIME_FRAC_BITS, d4
00058CF4  4285                     716      clr.l   d5
00058CF6  4286                     717      clr.l   d6
00058CF8  4843                     718      swap    d3
00058CFA                           719      
00058CFA  3C04                     720      move.w  d4, d6                          
00058CFC  DC43                     721      add.w   d3, d6
00058CFE  3A3C 003C                722      move.w  #ENTITY_OFF_SCREEN_MAX, d5
00058D02  DC45                     723      add.w   d5, d6
00058D04  6D00 001E                724      blt     TOO_FAR_OFF_SCREEN
00058D08                           725      
00058D08  9C45                     726      sub.w   d5, d6
00058D0A  9C45                     727      sub.w   d5, d6
00058D0C  0C46 00F0                728      cmpi.w  #STAGE_BORDER_Y_MAX, d6
00058D10  6E00 0012                729      bgt     TOO_FAR_OFF_SCREEN
00058D14  4843                     730      swap    d3
00058D16                           731      
00058D16                           732      ;d2 is updated x, d4 is updated y. Check if they are outside entity bounds.
00058D16                           733  
00058D16                           734      
00058D16  D642                     735      add.w   d2, d3                          ;adding to position.
00058D18  4843                     736      swap    d3
00058D1A  D644                     737      add.w   d4, d3
00058D1C  4843                     738      swap    d3
00058D1E  2143 0008                739      move.l  d3, GET_POSITION(a0)      
00058D22  4E75                     740      rts
00058D24                           741      
00058D24                           742      TOO_FAR_OFF_SCREEN:
00058D24  2F08                     743      move.l  a0, -(SP)
00058D26  4EB9 00059BF0            744      jsr     KILL_ENTITY_NO_POINTS
00058D2C  205F                     745      move.l  (SP)+, a0
00058D2E  4E75                     746      rts
00058D30                           747      
00058D30                           748  ;4(SP) is a reference to the entity calling it
00058D30                           749  ;8(SP) is the address of the path handler being killed
00058D30                           750  KILL_PATH:
00058D30  41EF 0008                751      lea 8(SP), a0
00058D34  117C 0000 000C           752      move.b  #0, GET_PH_FLAG(a0)
00058D3A  4E75                     753      rts
00058D3C                           754  
00058D3C                           755      ;To save checks, we assume that we are firing a gun at this point.
00058D3C                           756  FACE_PLAYER:
00058D3C                           757  
00058D3C  4E75                     758      rts
00058D3E                           759  
00058D3E                           760  
00058D3E                           761  
00058D3E= 00000000                 762  CURR_PATH_HANDLER    dc.l      0
00058D42                           763  PATH_HANDLER_BANK    ds.b      (PATH_HANDLER_SIZE*MAX_NUM_ENTITIES)
000591F2                           764  
000591F2                           765  P_DEBUG         incbin      'data/Paths/DebugPath'
00059212                           766  P_LINE          incbin      'data/Paths/P_Line'
0005921A                           767  P_LINE_SHOOT    ;incbin      'data/Paths/P_Line'
0005921A                           768  P_CIRCLE        ;incbin     'data/Paths/P_Circle'
0005921A                           769  P_BOX           ;incbin     'data/Paths/P_Box'
0005921A                           770  
0005921A                           771  
0005921A                           772  PATH_BANK         
0005921A= 000591F2 00059212 ...    773      dc.l    P_DEBUG, P_LINE, P_LINE_SHOOT, P_CIRCLE, P_BOX
0005922E                           774  
0005922E                           775  
0005922E                           776  
0005922E                           777  
0005922E                           778  
0005922E                           779  
0005922E                           780  
0005922E                           781  
0005922E                           782  
0005922E                           783  
0005922E                           784  
0005922E                           785  -------------------- end include --------------------
0005922E                           786      INCLUDE                             'src/PathNodes.X68'
0005922E  =00000008                787  PATH_NODE_SIZE                  EQU        8
0005922E                           788  
0005922E  =00000000                789  GET_PATHNODE_END                EQU        0        ;1 byte
0005922E  =00000001                790  GET_PATHNODE_TYPE               EQU        1        ;1 byte
0005922E  =00000002                791  GET_PATHNODE_TIME_ELAPSED       EQU        2        ;1 word?
0005922E  =00000004                792  GET_PATHNODE_ARG_1              EQU        4        ;1 word?
0005922E  =00000006                793  GET_PATHNODE_ARG_2              EQU        6        ;1 word?
0005922E                           794  
0005922E                           795  
0005922E  =00000000                796  PATHNODE_TYPE_SET_THETAS        EQU         0       
0005922E  =00000001                797  PATHNODE_TYPE_ADD_THETAS        EQU         1
0005922E  =00000002                798  PATHNODE_TYPE_SET_SPEEDS        EQU         2
0005922E  =00000003                799  PATHNODE_TYPE_ADD_SPEEDS        EQU         3
0005922E  =00000004                800  PATHNODE_TYPE_SPAWN_FORM        EQU         4
0005922E  =00000005                801  PATHNODE_TYPE_JUMP_TO_PATH      EQU         5
0005922E  =00000006                802  PATHNODE_TYPE_RESET_PATH        EQU         6
0005922E                           803  
0005922E                           804  ;4(SP) = Entity
0005922E                           805  ;8(SP) = Path handler to Update
0005922E                           806  
0005922E                           807  
0005922E                           808  NEXT_PATH_NODE:
0005922E                           809      ;Get Path[PATH_NODE_OFFSET]
0005922E                           810      ;Use its flag to determine which instruction to do in Instruction bank
0005922E                           811      ;Set timer for PathNodeUpdate after Path.TIME_BETWEEN.
0005922E                           812      ;Inc Path[PATH_NODE_OFFSET] by 1
0005922E  206F 0004                813      move.l  4(SP), a0
00059232  226F 0008                814      move.l  8(SP), a1
00059236                           815      
00059236  2469 0000                816      move.l  GET_PATH_ADDR(a1), a2
0005923A  4280                     817      clr.l   d0
0005923C  3029 000E                818      move.w  GET_PATH_NODE_OFFSET(a1), d0
00059240  E788                     819      lsl.l   #3, d0
00059242  D5C0                     820      adda.l  d0, a2                  ;a0 has entity, a1 has the path handler, a2 has the current node on path, 
00059244  4280                     821      clr.l   d0
00059246  47F9 00059322            822      lea     INSTRUCTION_BANK, a3
0005924C  102A 0001                823      move.b  GET_PATHNODE_TYPE(a2), d0
00059250  E588                     824      lsl.l   #2, d0                  ;multiply by 4 to account for size of an instruction. Finding instruction in the instruction bank.
00059252  D7C0                     825      adda.l  d0, a3
00059254  2653                     826      move.l  (a3), a3
00059256                           827      
00059256                           828      
00059256  102A 0000                829      move.b  GET_PATHNODE_END(a2), d0
0005925A  48E7 80D0                830      movem.l d0/a0/a1/a3, -(SP)
0005925E  4E93                     831      jsr     (a3)                    ;Passing arguments because these functions will NEVER be called outside of  here.
00059260  4CDF 0B01                832      movem.l (SP)+, d0/a0/a1/a3
00059264                           833      
00059264  1200                     834      move.b  d0, d1
00059266  6700 0028                835      beq     NO_NEXT_PATH_TIMER
0005926A                           836      
0005926A                           837      
0005926A                           838      ;Path node offset needs to be updated and the timer needs to be called IFF GET_PATHNODE_END == 00.
0005926A  5269 000E                839      addi.w  #1, GET_PATH_NODE_OFFSET(a1)
0005926E  508A                     840      adda.l  #PATH_NODE_SIZE, a2
00059270  4280                     841      clr.l   d0
00059272  2F09                     842      move.l  a1, -(SP)           ;path handler       at input 2
00059274  2F08                     843      move.l  a0, -(SP)           ;entity             at input 1
00059276  47F9 0005922E            844      lea     NEXT_PATH_NODE, a3
0005927C  2F0B                     845      move.l  a3, -(SP)
0005927E  302A 0002                846      move.w  GET_PATHNODE_TIME_ELAPSED(a2), d0
00059282  2F00                     847      move.l  d0, -(SP)
00059284  4EB9 0005A640            848      jsr SET_TIMER
0005928A  DFFC 00000010            849      adda.l  #16, SP
00059290                           850      NO_NEXT_PATH_TIMER:
00059290  4E75                     851      rts
00059292                           852      
00059292                           853  
00059292                           854  SET_THETAS:
00059292  4269 0008                855      clr.w   GET_PH_DEL_THET(a1)
00059296  4269 000A                856      clr.w   GET_PH_THETA(a1)
0005929A                           857  ADD_THETAS:
0005929A  302A 0004                858      move.w  GET_PATHNODE_ARG_1(a2), d0
0005929E  D169 0008                859      add.w  d0, GET_PH_DEL_THET(a1)
000592A2                           860      
000592A2                           861      
000592A2                           862      ;adding theta, clamping it between 0 and angle max, then putting that value in theta.
000592A2  302A 0006                863      move.w  GET_PATHNODE_ARG_2(a2), d0
000592A6  3229 000A                864      move.w  GET_PH_THETA(a1), d1
000592AA  D041                     865      add.w   d1, d0
000592AC  80FC 1680                866      divu    #ANGLE_MAX, d0
000592B0  4840                     867      swap    d0
000592B2                           868      
000592B2  3340 000A                869      move.w  d0, GET_PH_THETA(a1)
000592B6  4E75                     870      rts
000592B8                           871  
000592B8                           872  SET_SPEEDS:
000592B8  4269 0004                873      clr.w   GET_PH_ACC(a1)
000592BC  4269 0006                874      clr.w   GET_PH_VEL(a1)
000592C0                           875  ADD_SPEEDS:
000592C0  302A 0004                876      move.w  GET_PATHNODE_ARG_1(a2), d0
000592C4  D169 0004                877      add.w  d0, GET_PH_ACC(a1)
000592C8  302A 0006                878      move.w  GET_PATHNODE_ARG_2(a2), d0
000592CC  D169 0006                879      add.w  d0, GET_PH_VEL(a1)
000592D0                           880      
000592D0  4E75                     881      rts
000592D2                           882      
000592D2                           883  SPAWN_FORM:
000592D2  4281                     884      clr.l   d1
000592D4  4282                     885      clr.l   d2
000592D6  2028 0008                886      move.l  GET_POSITION(a0), d0
000592DA  322A 0004                887      move.w  GET_PATHNODE_ARG_1(a2), d1
000592DE  342A 0006                888      move.w  GET_PATHNODE_ARG_2(a2), d2
000592E2  2F00                     889      move.l  d0, -(SP)
000592E4  3F01                     890      move.w  d1, -(SP)
000592E6  3F02                     891      move.w  d2, -(SP)
000592E8  4EB9 0005955C            892      jsr SPAWN_FORMATION
000592EE  508F                     893      adda.l  #8, SP
000592F0  4E75                     894      rts    
000592F2                           895  JUMP_TO_PATH:
000592F2  4280                     896      clr.l   d0
000592F4  4281                     897      clr.l   d1
000592F6  302A 0004                898      move.w  GET_PATHNODE_ARG_1(a2), d0      ;d0 = path offset
000592FA  E588                     899      lsl.l   #2, d0
000592FC  47F9 0005921A            900      lea PATH_BANK, a3
00059302  2373 0000 0000           901      move.l  (a3, d0), GET_PATH_ADDR(a1)
00059308  336A 0006 000E           902      move.w  GET_PATHNODE_ARG_2(a2), GET_PATH_NODE_OFFSET(a1)
0005930E  5369 000E                903      subi.w  #1, GET_PATH_NODE_OFFSET(a1)
00059312  4E75                     904      rts
00059314                           905     
00059314                           906  
00059314                           907  ;Set path node offset to be -1 and for the current node in memory to be 1 path node behind where it should be, to account for incrementation.
00059314                           908  LOOP_OVER_PATH:
00059314  337C FFFF 000E           909      move.w  #-1, GET_PATH_NODE_OFFSET(a1)
0005931A  2469 0000                910      move.l  GET_PATH_ADDR(a1), a2
0005931E  518A                     911      suba.l  #PATH_NODE_SIZE, a2  
00059320  4E75                     912      rts
00059322                           913      
00059322                           914      
00059322                           915  INSTRUCTION_BANK
00059322= 00059292                 916      dc.l    SET_THETAS
00059326= 0005929A                 917      dc.l    ADD_THETAS
0005932A= 000592B8                 918      dc.l    SET_SPEEDS
0005932E= 000592C0                 919      dc.l    ADD_SPEEDS
00059332= 000592D2                 920      dc.l    SPAWN_FORM
00059336= 000592F2                 921      dc.l    JUMP_TO_PATH
0005933A= 00059314                 922      dc.l    LOOP_OVER_PATH
0005933E                           923      
0005933E                           924      
0005933E                           925  TEST_AREA:
0005933E  4E75                     926      rts
00059340                           927      
00059340                           928  
00059340                           929  -------------------- end include --------------------
00059340                           930      INCLUDE                             'src/DrawBitmaps.X68'
00059340                           931  
00059340                           932      
00059340                           933      ;a0 = reference to bitmap.
00059340                           934        ;Pointer to bmp file is already handled
00059340                           935      ;d5 = top left corner of bitmap X and Y is gonna be handled by d1. Least significant bytes are the X, most significant bytes are the Y
00059340                           936          ;Potential checks: Make sure that X and Y are within the bounds of the picture
00059340                           937      ;d6 = Width and height of bitmap chunk to display will be handled by d2. least significant bytes are X, most significant bytes are Y
00059340                           938          ;potential checks: Make sure that X and Y + corners doesn't take you out of the image. If it does, throw an error
00059340                           939      ;d7 = top left corner of hte output screen to display chunk. will be in d3
00059340                           940          
00059340                           941  DISPLAY_BMP_DATA:
00059340                           942     ValidBMP:
00059340                           943          ;LSB in d4 will be set based on the status of the display.
00059340                           944              ;0 = no errors
00059340                           945              ;1 = invalid bmp file/not a bmp file
00059340                           946              ;2 = topleft corner of bmp is invalid
00059340                           947              ;3 = Width and height of d2 is invalid
00059340                           948              ;4 = this is not a 24 or 32-bit bitmap.
00059340                           949              ;if LSB is not 0 by the end of this, go to RestoreRegisters.
00059340                           950                  ;Nothing will be displayed and our "error flag" will be set,
00059340                           951                  ;to be parsed outside the subroutine
00059340                           952  
00059340                           953      ;Loading in the width Backup and the "whattoadd"
00059340                           954  
00059340  4280                     955      clr.l   d0
00059342  4281                     956      clr.l   d1
00059344  4282                     957      clr.l   d2
00059346  4283                     958      clr.l   d3
00059348  4284                     959      clr.l   d4            
0005934A  1628 000A                960      move.b 10(a0), d3           ;Saving start offset into d3
0005934E                           961      
0005934E  1828 001C                962      move.b  $1C(a0), d4         ;bits per pixel
00059352                           963      
00059352  43F9 0005946C            964      lea END_LINE_ADD, a1
00059358                           965  
00059358                           966      
00059358  1428 0013                967      move.b  $13(a0),d2   ;pic width
0005935C  E14A                     968      lsl.w   #8, d2
0005935E  1428 0012                969      move.b  $12(a0),d2
00059362                           970      
00059362  D446                     971      add.w  d6, d2       ;picwidth + chunkwidth
00059364  E58A                     972      lsl.l   #2, d2
00059366  0C04 0020                973      cmpi.b  #32, d4
0005936A                           974  
0005936A  6700 000A                975      beq TwentyFourBitEndLineChange
0005936E  E48A                     976      lsr.l   #2, d2
00059370  2202                     977      move.l  d2, d1
00059372  D481                     978      add.l   d1, d2
00059374  D481                     979      add.l   d1, d2
00059376                           980      
00059376                           981      
00059376                           982      TwentyFourBitEndLineChange:
00059376  3282                     983      move.w  d2, (a1)    ;END_LINE_ADD has what to add/subtract at the end/beginning of a line respectively
00059378  45F9 0005946A            984      lea WIDTH_BACKUP, a2
0005937E  3486                     985      move.w  d6, (a2)
00059380  DD52                     986      add.w   d6, (a2)
00059382  DD52                     987      add.w   d6, (a2)
00059384  DD52                     988      add.w   d6, (a2)
00059386                           989      
00059386                           990      ;Height measurements in LSW d5 and d6
00059386                           991      
00059386  4242                     992      clr.w   d2
00059388  1428 0013                993      move.b  $13(a0),d2   ;pic width
0005938C  E14A                     994      lsl.w   #8, d2
0005938E  1428 0012                995      move.b  $12(a0),d2
00059392                           996          
00059392  1228 0017                997      move.b  $17(a0),d1   ;pic height
00059396  E149                     998      lsl.w   #8, d1
00059398  1228 0016                999      move.b  $16(a0),d1
0005939C                          1000      
0005939C                          1001      ;to get starting position, you need to get:
0005939C                          1002      ;4((TLC.y + height)*totalwidth + (TLC.x + chunkWidth))  OR 3x
0005939C                          1003  
0005939C  4845                    1004      swap    d5
0005939E  4846                    1005      swap    d6
000593A0  4280                    1006      clr.l   d0
000593A2                          1007      
000593A2  3001                    1008      move.w  d1, d0
000593A4  9046                    1009      sub.w  d6, d0                          
000593A6  9045                    1010      sub.w   d5, d0      
000593A8  C0C2                    1011      mulu.w  d2, d0      ;Image is stored as bottom left = 0,0
000593AA  4845                    1012      swap    d5
000593AC  4846                    1013      swap    d6
000593AE  4281                    1014      clr.l   d1
000593B0                          1015  
000593B0  3206                    1016      move.w  d6, d1
000593B2  D081                    1017      add.l   d1, d0
000593B4  3205                    1018      move.w  d5, d1
000593B6  D081                    1019      add.l   d1, d0 
000593B8                          1020  
000593B8  E588                    1021      lsl.l   #2, d0      ;d0 is now 4((TLC.y + height)*totalwidth + (TLC.x + chunkWidth)) 
000593BA                          1022      
000593BA                          1023      
000593BA  0C04 0020               1024      cmpi.b  #32, d4     ;if 24 bit, then don't change the value in d0. otherwise, redo the change and multiply by 3.
000593BE  6700 000A               1025      beq     TwentyFourBitOffsetChange
000593C2  E488                    1026      lsr.l   #2, d0
000593C4  2200                    1027      move.l  d0, d1
000593C6  D081                    1028      add.l   d1, d0
000593C8  D081                    1029      add.l   d1, d0
000593CA                          1030      
000593CA                          1031      TwentyFourBitOffsetChange:
000593CA  D083                    1032      add.l   d3, d0
000593CC  D1C0                    1033      adda.l  d0, a0   
000593CE                          1034  
000593CE  E54E                    1035      lsl.w   #2, d6
000593D0  4846                    1036      swap    d6
000593D2  E54E                    1037      lsl.w   #2, d6                  ;Width related stuff in LSW d5 and d6
000593D4  4281                    1038      clr.l   d1
000593D6  0C04 0020               1039      cmpi.b  #32, d4
000593DA  6700 004E               1040      beq     OUTERLOOP32 
000593DE                          1041  
000593DE                          1042   
000593DE                          1043      DisplayBitmap:
000593DE                          1044          ;Displaying a 24 bit bitmap. Separated for speed. Instead of doing a cmp and beq call every pixel drawn, do it once and instead make this large. They use the same code anyways.
000593DE                          1045          OuterLoop24:
000593DE  4846                    1046          swap    d6
000593E0                          1047              InnerLoop24:
000593E0  4281                    1048              clr.l   d1
000593E2  5788                    1049              suba.l  #3, a0
000593E4  1210                    1050              move.b  (a0), d1
000593E6  E189                    1051              lsl.l   #8, d1
000593E8  1228 0001               1052              move.b  1(a0), d1
000593EC  E189                    1053              lsl.l   #8, d1
000593EE  1228 0002               1054              move.b  2(a0), d1
000593F2                          1055              
000593F2                          1056              
000593F2  7050                    1057              move.l  #80, d0
000593F4  4E4F                    1058              trap    #15
000593F6  7051                    1059              move.l  #81, d0
000593F8  4E4F                    1060              trap    #15
000593FA                          1061                                          ; DRAWRECTANGLE:
000593FA  303C 0057               1062              move.w  #87, d0             ; Drawing rectangles instead of pixels
000593FE  3207                    1063              move.w  d7, d1
00059400  4847                    1064              swap    d7
00059402  3407                    1065              move.w  d7, d2
00059404  4847                    1066              swap    d7
00059406  D246                    1067              add.w   d6, d1
00059408  4846                    1068              swap    d6
0005940A  D446                    1069              add.w   d6, d2
0005940C  4846                    1070              swap    d6
0005940E  3601                    1071              move.w  d1, d3
00059410  5941                    1072              subi.w  #4, d1
00059412  3802                    1073              move.w  d2, d4
00059414  5942                    1074              subi.w  #4, d2
00059416  4E4F                    1075              trap    #15
00059418                          1076              
00059418                          1077              
00059418  5946                    1078              subi.w  #4, d6          ;sub from x. 
0005941A  6EC4                    1079              bgt     InnerLoop24
0005941C                          1080          
0005941C  D0D1                    1081          adda.w  (a1), a0                ;must account for dead space.
0005941E  DC52                    1082          add.w   (a2), d6
00059420                          1083          
00059420  4846                    1084          swap    d6
00059422  5946                    1085          subi.w  #4, d6
00059424  6EB8                    1086          bgt OuterLoop24
00059426  6000 0040               1087          bra RESTOREREGISTERS
0005942A                          1088      
0005942A                          1089      
0005942A                          1090          OuterLoop32:
0005942A  4846                    1091          swap    d6
0005942C                          1092              InnerLoop32:
0005942C  303C 0050               1093              move.w  #80, d0
00059430  2220                    1094              move.l  -(a0), d1
00059432  E089                    1095              lsr.l   #8, d1
00059434                          1096  
00059434  4E4F                    1097              trap    #15
00059436  303C 0051               1098              move.w  #81, d0
0005943A  4E4F                    1099              trap    #15
0005943C                          1100              
0005943C  303C 0057               1101              move.w  #87, d0             ;Drawing rectangles instead of pixels
00059440  3207                    1102              move.w  d7, d1
00059442  4847                    1103              swap    d7
00059444  3407                    1104              move.w  d7, d2
00059446  4847                    1105              swap    d7
00059448  D246                    1106              add.w   d6, d1
0005944A  4846                    1107              swap    d6
0005944C  D446                    1108              add.w   d6, d2
0005944E  4846                    1109              swap    d6
00059450                          1110              
00059450  3601                    1111              move.w  d1, d3
00059452  5843                    1112              addi.w  #4, d3
00059454  3802                    1113              move.w  d2, d4
00059456  5844                    1114              addi.w  #4, d4
00059458  4E4F                    1115              trap    #15
0005945A                          1116              
0005945A                          1117              
0005945A  5946                    1118              subi.w  #4, d6          ;sub from x. 
0005945C  66CE                    1119              bne     InnerLoop32
0005945E                          1120          
0005945E  D0D1                    1121          adda.w  (a1), a0                ;must account for dead space.
00059460  DC52                    1122          add.w   (a2), d6
00059462  4846                    1123          swap    d6
00059464  5946                    1124          subi.w  #4, d6
00059466  66C2                    1125          bne OuterLoop32
00059468                          1126      RestoreRegisters:
00059468                          1127          ;Moves values from the stack / an address back to registers
00059468                          1128          ;increments the stack pointer back
00059468                          1129          ;DO NOT SET D0 HERE.    
00059468  4E75                    1130      rts
0005946A                          1131  
0005946A                          1132  
0005946A                          1133  WIDTH_BACKUP            ds.w    1
0005946C                          1134  END_LINE_ADD            ds.w    1
0005946E                          1135  
0005946E                          1136  EOF
0005946E                          1137  
0005946E                          1138  
0005946E                          1139  
0005946E                          1140  
0005946E                          1141  
0005946E                          1142  
0005946E                          1143  
0005946E                          1144  
0005946E                          1145  
0005946E                          1146  
0005946E                          1147  
0005946E                          1148  
0005946E                          1149  
0005946E                          1150  
0005946E                          1151  
0005946E                          1152  -------------------- end include --------------------
0005946E                          1153      INCLUDE                             'src/Input.X68'
0005946E  =0000005A               1154  KEYCODE_FIRE        EQU     'Z'
0005946E  =00000058               1155  KEYCODE_SECONDARY   EQU     'X'
0005946E  =0000000D               1156  KEYCODE_PAUSE       EQU     $0D
0005946E  =00000010               1157  KEYCODE_FOCUS       EQU     $10
0005946E                          1158  
0005946E  =00000025               1159  KEYCODE_LEFT        EQU     $25
0005946E  =00000027               1160  KEYCODE_RIGHT       EQU     $27
0005946E  =00000026               1161  KEYCODE_UP          EQU     $26
0005946E  =00000028               1162  KEYCODE_DOWN        EQU     $28
0005946E                          1163  
0005946E  =00000013               1164  TRAP_CODE_INPUT     EQU     19
0005946E                          1165  
0005946E  =00000018               1166  BIT_OFFSET_SHOOT    EQU     24
0005946E  =00000010               1167  BIT_OFFSET_SECONDARY   EQU  16
0005946E  =00000008               1168  BIT_OFFSET_PAUSE    EQU     8
0005946E  =00000000               1169  BIT_OFFSET_FOCUS    EQU     0
0005946E                          1170  
0005946E  =00000018               1171  BIT_OFFSET_LEFT     EQU     24
0005946E  =00000010               1172  BIT_OFFSET_RIGHT    EQU     16
0005946E  =00000008               1173  BIT_OFFSET_UP       EQU     8
0005946E  =00000000               1174  BIT_OFFSET_DOWN     EQU     0
0005946E                          1175  
0005946E                          1176  
0005946E                          1177      
0005946E                          1178      READ_INPUT:
0005946E                          1179      
0005946E                          1180      
0005946E                          1181      
0005946E                          1182          ;Setting input status for Firing, secondary fire, pausing, and focusing.
0005946E  4284                    1183          clr.l   d4
00059470  41F9 0005954C           1184          lea     ACTION_INPUT, a0
00059476  43F9 00059550           1185          lea     ACTION_INPUT_DOWN, a1
0005947C  2610                    1186          move.l  (a0), d3                    ;d3 is the old action inputs. 
0005947E  303C 0013               1187          move.w  #19, d0
00059482                          1188       
00059482  223C 5A580D10           1189          move.l  #KEYCODE_FIRE<<BIT_OFFSET_SHOOT+KEYCODE_SECONDARY<<BIT_OFFSET_SECONDARY+KEYCODE_PAUSE<<BIT_OFFSET_PAUSE+KEYCODE_FOCUS<<BIT_OFFSET_FOCUS, d1         ;keypresses for actions(shoot, secondary, pause, and focus
00059488  4E4F                    1190          trap    #15
0005948A                          1191          
0005948A  0803 0018               1192          btst    #BIT_OFFSET_SHOOT, d3       ;check if old button was pressed down last frame. if so, not down.
0005948E  6600 000E               1193          bne     NO_SHOOT_DOWN
00059492  0801 0018               1194          btst    #BIT_OFFSET_SHOOT, d1       ;check if new button is not pressed down this frame. if so, not down
00059496  6700 0006               1195          beq     NO_SHOOT_DOWN
0005949A  08C4 0018               1196          bset    #BIT_OFFSET_SHOOT, d4       ;d4 is going to be our "ActionInputDown" long.
0005949E                          1197          NO_SHOOT_DOWN:
0005949E                          1198          
0005949E  0803 0010               1199          btst    #BIT_OFFSET_SECONDARY, d3
000594A2  6600 000E               1200          bne     NO_SHOOT_SECONDARY
000594A6  0801 0010               1201          btst    #BIT_OFFSET_SECONDARY, d1
000594AA  6700 0006               1202          beq     NO_SHOOT_SECONDARY
000594AE  08C4 0010               1203          bset    #BIT_OFFSET_SECONDARY, d4
000594B2                          1204          
000594B2                          1205          NO_SHOOT_SECONDARY:
000594B2                          1206          
000594B2  0803 0008               1207          btst    #BIT_OFFSET_PAUSE, d3
000594B6  6600 000E               1208          bne     NO_PAUSE_DOWN
000594BA  0801 0008               1209          btst    #BIT_OFFSET_PAUSE, d1
000594BE  6700 0006               1210          beq     NO_PAUSE_DOWN
000594C2  08C4 0008               1211          bset    #BIT_OFFSET_PAUSE, d4
000594C6                          1212   
000594C6                          1213          NO_PAUSE_DOWN:
000594C6                          1214          
000594C6  0803 0000               1215          btst    #BIT_OFFSET_FOCUS, d3
000594CA  6600 000E               1216          bne     NO_FOCUS_DOWN
000594CE  0801 0000               1217          btst    #BIT_OFFSET_FOCUS, d1
000594D2  6700 0006               1218          beq     NO_FOCUS_DOWN      
000594D6  08C4 0000               1219          bset    #BIT_OFFSET_FOCUS, d4
000594DA                          1220          
000594DA                          1221          NO_FOCUS_DOWN:   
000594DA  2081                    1222          move.l  d1, (a0)
000594DC  2284                    1223          move.l  d4, (a1)
000594DE                          1224          
000594DE                          1225          
000594DE                          1226          ;SETTING INPUTS FOR MOVEMENT. Same as above, with setting button_down and normal button_up.
000594DE  41F9 00059554           1227          lea     MOVE_INPUT, a0
000594E4  43F9 00059558           1228          lea     MOVE_INPUT_DOWN, a1
000594EA  2610                    1229          move.l  (a0), d3
000594EC  4284                    1230          clr.l   d4 
000594EE                          1231          
000594EE                          1232          
000594EE  223C 25272628           1233          move.l  #KEYCODE_LEFT<<BIT_OFFSET_LEFT+KEYCODE_RIGHT<<BIT_OFFSET_RIGHT+KEYCODE_UP<<BIT_OFFSET_UP+KEYCODE_DOWN+BIT_OFFSET_DOWN<<BIT_OFFSET_DOWN, d1          ;keypresses for moving (left, right, up, down)
000594F4  4E4F                    1234          trap    #15
000594F6                          1235          
000594F6  0801 0025               1236          btst    #KEYCODE_LEFT, d1
000594FA  6600 000E               1237          bne     NO_LEFT_DOWN
000594FE  0803 0025               1238          btst    #KEYCODE_LEFT, d3
00059502  6700 0006               1239          beq     NO_LEFT_DOWN
00059506  08C4 0025               1240          bset    #KEYCODE_LEFT, d4
0005950A                          1241          
0005950A                          1242          NO_LEFT_DOWN:
0005950A                          1243          
0005950A  0801 0027               1244          btst    #KEYCODE_RIGHT, d1
0005950E  6600 000E               1245          bne     NO_RIGHT_DOWN
00059512  0803 0027               1246          btst    #KEYCODE_RIGHT, d3
00059516  6700 0006               1247          beq     NO_RIGHT_DOWN
0005951A  08C4 0027               1248          bset    #KEYCODE_RIGHT, d4
0005951E                          1249          
0005951E                          1250          NO_RIGHT_DOWN:
0005951E                          1251          
0005951E  0801 0026               1252          btst    #KEYCODE_UP, d1
00059522  6600 000E               1253          bne     NO_UP_DOWN
00059526  0803 0026               1254          btst    #KEYCODE_UP, d3
0005952A  6700 0006               1255          beq     NO_UP_DOWN
0005952E  08C4 0026               1256          bset    #KEYCODE_UP, d4
00059532                          1257          
00059532                          1258          NO_UP_DOWN:
00059532                          1259          
00059532  0801 0028               1260          btst    #KEYCODE_DOWN, d1
00059536  6600 000E               1261          bne     NO_DOWN_DOWN
0005953A  0803 0028               1262          btst    #KEYCODE_DOWN, d3
0005953E  6700 0006               1263          beq     NO_DOWN_DOWN
00059542  08C4 0028               1264          bset    #KEYCODE_DOWN, d4
00059546                          1265          
00059546                          1266          NO_DOWN_DOWN:
00059546                          1267         
00059546  2081                    1268          move.l  d1, (a0)
00059548  2284                    1269          move.l  d4, (a1)
0005954A                          1270          
0005954A  4E75                    1271          rts
0005954C                          1272  
0005954C                          1273  
0005954C= 00000000                1274  ACTION_INPUT        dc.l    0
00059550= 00000000                1275  ACTION_INPUT_DOWN   dc.l    0
00059554= 00000000                1276  MOVE_INPUT          dc.l    0
00059558= 00000000                1277  MOVE_INPUT_DOWN     dc.l    0
0005955C                          1278  
0005955C                          1279  
0005955C                          1280  
0005955C                          1281  
0005955C                          1282  
0005955C                          1283  -------------------- end include --------------------
0005955C                          1284      INCLUDE                             'src/Formation.X68'
0005955C                          1285  
0005955C  =00000010               1286  FORMATION_NODE_SIZE         EQU     16
0005955C                          1287  
0005955C  =00000000               1288  GET_FORMATION_ENTITY        EQU     0
0005955C  =00000001               1289  GET_FORMATION_EN_VAR        EQU     1
0005955C  =00000002               1290  GET_FORMATION_THETA         EQU     2
0005955C  =00000003               1291  GET_FORMATION_PATH          EQU     3
0005955C  =00000004               1292  GET_FORMATION_POS           EQU     4
0005955C  =00000008               1293  GET_FORMATION_IN_DEL_THET   EQU     8               ;1 word for initial theta, 1 word for delta_theta 
0005955C  =0000000A               1294  GET_FORMATION_IN_THETA      EQU     10
0005955C  =0000000C               1295  GET_FORMATION_IN_ACC        EQU     12              ;1 word for initial vel, 1 word for acceleration 
0005955C  =0000000E               1296  GET_FORMATION_IN_VEL        EQU     14
0005955C                          1297  
0005955C                          1298      
0005955C                          1299  ;4SP = formation offset
0005955C                          1300  ;6sp = totalThetaOffset
0005955C                          1301  ;8sp = formation Spawning Position
0005955C                          1302  SPAWN_FORMATION:
0005955C  4281                    1303      clr.l   d1
0005955E  4285                    1304      clr.l   d5
00059560  41F9 0005A60E           1305      lea ENTITY_DATA_TABLE, a0
00059566  43F9 00059648           1306      lea FORMATION_BANK, a1
0005956C  322F 0004               1307      move.w  4(SP), d1       ;formation offset
00059570  E589                    1308      lsl.l   #2, d1
00059572  D3C1                    1309      adda.l  d1, a1         
00059574  2251                    1310      move.l  (a1), a1        ;Now at the formation data. 
00059576  4281                    1311      clr.l   d1
00059578                          1312      
00059578                          1313      SP_FORM_LOOP:
00059578  4280                    1314          clr.l   d0
0005957A  302F 0006               1315          move.w  6(SP), d0       ;d0 it total formation's theta offset
0005957E  282F 0008               1316          move.l  8(SP), d4       ;position offset
00059582  1229 0000               1317          move.b  GET_FORMATION_ENTITY(a1), d1
00059586  0C01 00FF               1318          cmpi.b  #$FF, d1 ;no entity has an offset of FF, so we know it's not workin
0005958A  6700 005A               1319          beq     STOP_SPAWN_FORM
0005958E                          1320          
0005958E  4282                    1321          clr.l   d2
00059590                          1322          ;move.b  GET_FORMATION_THETA(a1), d2
00059590                          1323          ;lsl.w   #4, d2                          ;Formation theta has no frac bits and is half of what it should be.
00059590  D082                    1324          add.l   d2, d0                          ;adding wave's theta offset to formation node's theta offset
00059592  2629 0004               1325          move.l  GET_FORMATION_POS(a1), d3
00059596  D843                    1326          add.w   d3, d4
00059598  4843                    1327          swap    d3
0005959A  4844                    1328          swap    d4
0005959C  D843                    1329          add.w   d3, d4
0005959E  4844                    1330          swap    d4
000595A0  4285                    1331          clr.l   d5
000595A2  1A29 0003               1332          move.b  GET_FORMATION_PATH(a1), d5
000595A6  3229 000A               1333          move.w  GET_FORMATION_IN_THETA(a1), d1
000595AA  D26F 0006               1334          add.w   6(SP), d1
000595AE  2F08                    1335          move.l  a0, -(SP)
000595B0  2F09                    1336          move.l  a1, -(SP)
000595B2                          1337  
000595B2                          1338          
000595B2  3F01                    1339          move.w  d1, -(SP)
000595B4  3F29 0008               1340          move.w  GET_FORMATION_IN_DEL_THET(a1), -(SP)
000595B8  3F29 000E               1341          move.w  GET_FORMATION_IN_VEL(a1), -(SP)
000595BC  3F29 000C               1342          move.w  GET_FORMATION_IN_ACC(a1), -(SP)
000595C0                          1343         
000595C0  2F05                    1344          move.l  d5, -(SP)       ;path offset
000595C2  2F00                    1345          move.l  d0, -(SP)       ;Theta Initial for the entity
000595C4  2F04                    1346          move.l  d4, -(SP)       ;position to spawn.
000595C6  4281                    1347          clr.l   d1  
000595C8  1229 0000               1348          move.b  GET_FORMATION_ENTITY(a1), d1
000595CC  2F01                    1349          move.l  d1, -(SP)       ;entity offset
000595CE                          1350          
000595CE  4EB9 00059ABE           1351          jsr     TRY_SPAWN_ENTITY
000595D4                          1352          
000595D4  DFFC 00000018           1353          adda.l  #24, SP
000595DA  225F                    1354          move.l  (SP)+, a1
000595DC  205F                    1355          move.l  (SP)+, a0
000595DE  D3FC 00000010           1356          adda.l  #FORMATION_NODE_SIZE, a1
000595E4  6092                    1357          bra     SP_FORM_LOOP
000595E6                          1358      
000595E6                          1359      STOP_SPAWN_FORM:
000595E6  4E75                    1360      rts
000595E8                          1361      
000595E8                          1362      
000595E8                          1363  F_SPAWN_DEBUG   incbin      'data/Formations/F_SPAWN_DEBUG'
00059618                          1364  F_SPAWN_PLAYER  ;incbin     'data/Formations/F_SPAWN_PLAYER'
00059618                          1365  F_SPAWN_BASIC   ;incbin     'data/Formations/F_SPAWN_BASIC'
00059618                          1366  PG_DEBUG        incbin      'data/Guns/DEBUG_GUN'
00059648                          1367      
00059648                          1368  FORMATION_BANK
00059648= 000595E8                1369      dc.l    F_SPAWN_DEBUG
0005964C= 00059618                1370      dc.l    PG_DEBUG
00059650                          1371  
00059650                          1372  -------------------- end include --------------------
00059650                          1373      INCLUDE                             'src/AngleLookup.X68'
00059650                          1374  
00059650                          1375           ; first instruction of program
00059650                          1376  
00059650                          1377  
00059650                          1378  
00059650                          1379  ;4(SP) = angle measure between 0 and 360 ($0 and $168)
00059650                          1380  ;Returns the movement vector, and overwrites 4(SP)
00059650                          1381  
00059650  =00000004               1382  VECTOR_FRAC_BITS        EQU     4
00059650  =0000005A               1383  NUM_ANGLES              EQU     90
00059650                          1384  
00059650                          1385  GET_VECTOR:
00059650  202F 0004               1386      move.l  4(SP), d0
00059654                          1387      ;360 degrees, 90 accounted for angles along the unit circle, so we bitshift right by 2 to divide by 4
00059654                          1388      ;BUT we have words, which are size 2, so we would bit shift left by 1 to multiply by 2 bytes for the offset
00059654                          1389      ;together, we just bitshift to the right by 1 bit and get the angle at that offset!
00059654                          1390      ;However, doing it in this way makes it so we could get an odd number. instead of bit shifting right then left,
00059654                          1391      ;we just bit shift right and clear the rightmost bit to get the same effect.
00059654                          1392      
00059654                          1393      
00059654  E248                    1394      lsr.w   #1, d0
00059656  0880 0000               1395      bclr.l  #0, d0
0005965A                          1396      
0005965A                          1397  
0005965A  41F9 00059676           1398      lea     SIN_VALUE, a0
00059660  3230 0000               1399      move.w  (a0,d0),d1 
00059664  4841                    1400      swap    d1
00059666                          1401      
00059666  41F9 0005972A           1402      lea     COS_VALUE, a0
0005966C  3230 0000               1403      move.w  (a0, d0), d1
00059670  2F41 0004               1404      move.l  d1, 4(SP)  
00059674  4E75                    1405      rts
00059676                          1406         
00059676                          1407      
00059676                          1408  
00059676                          1409  
00059676                          1410  ;All values in the table use 8 decimal bits and each the difference between each offset is 4 degrees
00059676                          1411  SIN_VALUE:
00059676                          1412      
00059676= 0000                    1413      dc.w    $000
00059678= 0011                    1414      dc.w    $011
0005967A= 0023                    1415      dc.w    $023
0005967C= 0035                    1416      dc.w    $035
0005967E= 0046                    1417      dc.w    $046
00059680= 0057                    1418      dc.w    $057
00059682= 0068                    1419      dc.w    $068
00059684= 0078                    1420      dc.w    $078
00059686= 0087                    1421      dc.w    $087
00059688= 0096                    1422      dc.w    $096
0005968A= 00A4                    1423      dc.w    $0A4
0005968C= 00B1                    1424      dc.w    $0B1
0005968E= 00BE                    1425      dc.w    $0BE
00059690= 00C9                    1426      dc.w    $0C9
00059692= 00D4                    1427      dc.w    $0D4
00059694= 00DD                    1428      dc.w    $0DD
00059696= 00E6                    1429      dc.w    $0E6
00059698= 00ED                    1430      dc.w    $0ED
0005969A= 00F3                    1431      dc.w    $0F3
0005969C= 00F8                    1432      dc.w    $0F8
0005969E= 00FC                    1433      dc.w    $0FC
000596A0= 00FE                    1434      dc.w    $0FE
000596A2= 0100                    1435      dc.w    $100        ;Where 90 will be
000596A4= 00FF                    1436      dc.w    $0FF
000596A6= 00FE                    1437      dc.w    $0FE
000596A8= 00FC                    1438      dc.w    $0FC
000596AA= 00F8                    1439      dc.w    $0F8
000596AC= 00F3                    1440      dc.w    $0F3
000596AE= 00ED                    1441      dc.w    $0ED
000596B0= 00E6                    1442      dc.w    $0E6
000596B2= 00DD                    1443      dc.w    $0DD
000596B4= 00D4                    1444      dc.w    $0D4
000596B6= 00C9                    1445      dc.w    $0C9
000596B8= 00BE                    1446      dc.w    $0BE
000596BA= 00B1                    1447      dc.w    $0B1
000596BC= 00A4                    1448      dc.w    $0A4
000596BE= 0096                    1449      dc.w    $096
000596C0= 0087                    1450      dc.w    $087
000596C2= 0078                    1451      dc.w    $078
000596C4= 0068                    1452      dc.w    $068
000596C6= 0057                    1453      dc.w    $057
000596C8= 0046                    1454      dc.w    $046
000596CA= 0035                    1455      dc.w    $035
000596CC= 0023                    1456      dc.w    $023
000596CE= 0011                    1457      dc.w    $011
000596D0= 0000                    1458      dc.w    $000
000596D2= FFEF                    1459      dc.w    $FFEF
000596D4= FFDD                    1460      dc.w    $FFDD
000596D6= FFCB                    1461      dc.w    $FFCB
000596D8= FFBA                    1462      dc.w    $FFBA
000596DA= FFA9                    1463      dc.w    $FFA9
000596DC= FF98                    1464      dc.w    $FF98
000596DE= FF88                    1465      dc.w    $FF88
000596E0= FF79                    1466      dc.w    $FF79
000596E2= FF6A                    1467      dc.w    $FF6A
000596E4= FF5C                    1468      dc.w    $FF5C
000596E6= FF4F                    1469      dc.w    $FF4F
000596E8= FF42                    1470      dc.w    $FF42
000596EA= FF37                    1471      dc.w    $FF37
000596EC= FF2C                    1472      dc.w    $FF2C
000596EE= FF23                    1473      dc.w    $FF23
000596F0= FF1A                    1474      dc.w    $FF1A
000596F2= FF13                    1475      dc.w    $FF13
000596F4= FF0D                    1476      dc.w    $FF0D
000596F6= FF08                    1477      dc.w    $FF08
000596F8= FF04                    1478      dc.w    $FF04
000596FA= FF02                    1479      dc.w    $FF02
000596FC= FF00                    1480      dc.w    $FF00
000596FE= FF01                    1481      dc.w    $FF01
00059700= FF02                    1482      dc.w    $FF02
00059702= FF04                    1483      dc.w    $FF04
00059704= FF08                    1484      dc.w    $FF08
00059706= FF0D                    1485      dc.w    $FF0D
00059708= FF13                    1486      dc.w    $FF13
0005970A= FF1A                    1487      dc.w    $FF1A
0005970C= FF23                    1488      dc.w    $FF23
0005970E= FF2C                    1489      dc.w    $FF2C
00059710= FF37                    1490      dc.w    $FF37
00059712= FF42                    1491      dc.w    $FF42
00059714= FF4F                    1492      dc.w    $FF4F
00059716= FF5C                    1493      dc.w    $FF5C
00059718= FF6A                    1494      dc.w    $FF6A
0005971A= FF79                    1495      dc.w    $FF79
0005971C= FF88                    1496      dc.w    $FF88
0005971E= FF98                    1497      dc.w    $FF98
00059720= FFA9                    1498      dc.w    $FFA9
00059722= FFBA                    1499      dc.w    $FFBA
00059724= FFCB                    1500      dc.w    $FFCB
00059726= FFDD                    1501      dc.w    $FFDD
00059728= FFEF                    1502      dc.w    $FFEF
0005972A                          1503  COS_VALUE:
0005972A= 0100                    1504      dc.w    $100
0005972C= 00FF                    1505      dc.w    $0FF
0005972E= 00FD                    1506      dc.w    $0FD
00059730= 00FA                    1507      dc.w    $0FA
00059732= 00F6                    1508      dc.w    $0F6
00059734= 00F0                    1509      dc.w    $0F0
00059736= 00E9                    1510      dc.w    $0E9
00059738= 00E2                    1511      dc.w    $0E2
0005973A= 00D9                    1512      dc.w    $0D9
0005973C= 00CF                    1513      dc.w    $0CF
0005973E= 00C4                    1514      dc.w    $0C4
00059740= 00B8                    1515      dc.w    $0B8
00059742= 00AB                    1516      dc.w    $0AB
00059744= 009D                    1517      dc.w    $09D
00059746= 008F                    1518      dc.w    $08F
00059748= 007F                    1519      dc.w    $07F
0005974A= 0070                    1520      dc.w    $070
0005974C= 005F                    1521      dc.w    $05F
0005974E= 004F                    1522      dc.w    $04F
00059750= 003D                    1523      dc.w    $03D
00059752= 002C                    1524      dc.w    $02C
00059754= 001A                    1525      dc.w    $01A
00059756= 0000                    1526      dc.w    $000
00059758= FFF8                    1527      dc.w    $FFF8
0005975A= FFE6                    1528      dc.w    $FFE6
0005975C= FFD4                    1529      dc.w    $FFD4
0005975E= FFC3                    1530      dc.w    $FFC3
00059760= FFB1                    1531      dc.w    $FFB1
00059762= FFA1                    1532      dc.w    $FFA1
00059764= FF90                    1533      dc.w    $FF90
00059766= FF80                    1534      dc.w    $FF80
00059768= FF71                    1535      dc.w    $FF71
0005976A= FF63                    1536      dc.w    $FF63
0005976C= FF55                    1537      dc.w    $FF55
0005976E= FF48                    1538      dc.w    $FF48
00059770= FF3C                    1539      dc.w    $FF3C
00059772= FF31                    1540      dc.w    $FF31
00059774= FF27                    1541      dc.w    $FF27
00059776= FF1E                    1542      dc.w    $FF1E
00059778= FF17                    1543      dc.w    $FF17
0005977A= FF10                    1544      dc.w    $FF10
0005977C= FF0A                    1545      dc.w    $FF0A
0005977E= FF06                    1546      dc.w    $FF06
00059780= FF03                    1547      dc.w    $FF03
00059782= FF01                    1548      dc.w    $FF01
00059784= FF00                    1549      dc.w    $FF00
00059786= FF01                    1550      dc.w    $FF01
00059788= FF03                    1551      dc.w    $FF03
0005978A= FF06                    1552      dc.w    $FF06
0005978C= FF0A                    1553      dc.w    $FF0A
0005978E= FF10                    1554      dc.w    $FF10
00059790= FF17                    1555      dc.w    $FF17
00059792= FF1E                    1556      dc.w    $FF1E
00059794= FF27                    1557      dc.w    $FF27
00059796= FF31                    1558      dc.w    $FF31
00059798= FF3C                    1559      dc.w    $FF3C
0005979A= FF48                    1560      dc.w    $FF48
0005979C= FF55                    1561      dc.w    $FF55
0005979E= FF63                    1562      dc.w    $FF63
000597A0= FF71                    1563      dc.w    $FF71
000597A2= FF81                    1564      dc.w    $FF81
000597A4= FF90                    1565      dc.w    $FF90
000597A6= FFA1                    1566      dc.w    $FFA1
000597A8= FFB1                    1567      dc.w    $FFB1
000597AA= FFC3                    1568      dc.w    $FFC3
000597AC= FFD4                    1569      dc.w    $FFD4
000597AE= FFE6                    1570      dc.w    $FFE6
000597B0= 0000                    1571      dc.w    $000               ;270 degrees
000597B2= 0008                    1572      dc.w    $008
000597B4= 001A                    1573      dc.w    $01A
000597B6= 002C                    1574      dc.w    $02C
000597B8= 003D                    1575      dc.w    $03D
000597BA= 004F                    1576      dc.w    $04F
000597BC= 005F                    1577      dc.w    $05F
000597BE= 0070                    1578      dc.w    $070
000597C0= 0080                    1579      dc.w    $080
000597C2= 008F                    1580      dc.w    $08F
000597C4= 009D                    1581      dc.w    $09D
000597C6= 00AB                    1582      dc.w    $0AB
000597C8= 00B8                    1583      dc.w    $0B8
000597CA= 00C4                    1584      dc.w    $0C4
000597CC= 00CF                    1585      dc.w    $0CF
000597CE= 00D9                    1586      dc.w    $0D9
000597D0= 00E2                    1587      dc.w    $0E2
000597D2= 00E9                    1588      dc.w    $0E9
000597D4= 00F0                    1589      dc.w    $0F0
000597D6= 00F6                    1590      dc.w    $0F6
000597D8= 00FA                    1591      dc.w    $0FA
000597DA= 00FD                    1592      dc.w    $0FD
000597DC= 00FF                    1593      dc.w    $0FF
000597DE                          1594  
000597DE                          1595  
000597DE                          1596  -------------------- end include --------------------
000597DE                          1597      INCLUDE                             'src/Player.X68'
000597DE  =00000008               1598  PLAYER_SPEED_NORMAL         EQU     8
000597DE  =0000000C               1599  PLAYER_SPEED_FOCUS          EQU     12
000597DE  =000000D0               1600  PLAYER_GUN                  EQU     $D0
000597DE  =000000FF               1601  PLAYER_SWORD_DAMAGE         EQU     $FF
000597DE                          1602  
000597DE                          1603  
000597DE                          1604  ;READ THE NOTES AT THE BOTTOM ABOVE MOVEMENT TABLE
000597DE                          1605       
000597DE                          1606  PLAYER_UPDATE:
000597DE                          1607  
000597DE                          1608  
000597DE                          1609  
000597DE                          1610          
000597DE  41F9 00059C06           1611          lea     ET_PLAYER_START, a0
000597E4                          1612          
000597E4  1028 0018               1613          move.b  GET_INFO(a0), d0
000597E8  0C00 00FF               1614          cmpi.b  #STATUS_ALIVE, d0
000597EC  6700 0004               1615          beq     PLAYER_IS_ALIVE
000597F0                          1616          
000597F0                          1617          
000597F0                          1618          ;SET GAME STATUS TO BE MAIN MENU OR HIGH SCORE
000597F0                          1619          
000597F0                          1620          
000597F0  4E75                    1621          rts
000597F2                          1622          
000597F2                          1623          PLAYER_IS_ALIVE:
000597F2  2F08                    1624          move.l  a0, -(SP)
000597F4  4EB9 00058AA2           1625          jsr INVAL_OBJECT 
000597FA  205F                    1626          move.l  (SP)+, a0
000597FC  43F9 0005954C           1627          lea     ACTION_INPUT, a1
00059802  2411                    1628          move.l  (a1), d2                    ;all action inputs just pressed down this frame are in d2
00059804                          1629          
00059804                          1630          ;Determining what velocity to store for the player, focus velocity or default.
00059804  117C 0008 0000          1631          move.b  #PLAYER_SPEED_NORMAL, GET_VELOCITY(a0)
0005980A  0802 0000               1632          btst    #BIT_OFFSET_FOCUS, d2
0005980E  6700 0008               1633          beq     PLAYER_NORMAL_SPEED
00059812  117C 000C 0000          1634          move.b  #PLAYER_SPEED_FOCUS, GET_VELOCITY(a0)      
00059818                          1635          PLAYER_NORMAL_SPEED: 
00059818                          1636          
00059818  43F9 00059550           1637          lea     ACTION_INPUT_DOWN, a1
0005981E  2411                    1638          move.l  (a1), d2
00059820  0802 0008               1639          btst    #BIT_OFFSET_PAUSE, d2
00059824  6700 000E               1640          beq     NO_PAUSE_INPUT
00059828  43F9 0005B480           1641          lea     GAME_STATE, a1
0005982E  12BC 0002               1642          move.b  #GAME_STATE_PAUSED, (a1)
00059832  4E75                    1643          rts 
00059834                          1644          NO_PAUSE_INPUT:
00059834                          1645        
00059834                          1646          
00059834                          1647          ;Player shoot
00059834  0802 0018               1648          btst    #BIT_OFFSET_SHOOT, d2
00059838  6700 001A               1649          beq     PLAYER_DONT_FIRE
0005983C  2F28 0008               1650          move.l  GET_POSITION(a0), -(SP)
00059840  3F3C 05A0               1651          move.w  #$05A0, -(SP)           
00059844  3F3C 0001               1652          move.w  #1, -(SP)           
00059848  4EB9 0005955C           1653          jsr     SPAWN_FORMATION
0005984E  508F                    1654          adda.l  #8, SP
00059850  6000 001E               1655          bra     PLAYER_DONT_SECONDARY
00059854                          1656          PLAYER_DONT_FIRE:
00059854                          1657          ;Player shoot... again!
00059854  0802 0010               1658          btst    #BIT_OFFSET_SECONDARY, d2
00059858  6700 0016               1659          beq     PLAYER_DONT_SECONDARY
0005985C  2F28 0008               1660          move.l  GET_POSITION(a0), -(SP)
00059860  3F3C 05A0               1661          move.w  #$05A0, -(SP)           
00059864  3F3C 0001               1662          move.w  #1, -(SP)           
00059868  4EB9 0005955C           1663          jsr     SPAWN_FORMATION
0005986E  508F                    1664          adda.l  #8, SP
00059870                          1665          PLAYER_DONT_SECONDARY:
00059870                          1666          
00059870                          1667          ;checking directional button bits, using them to form a 1 byte value to serve as
00059870                          1668          ;an offset in the movement table. Table holds normalized directional value in a long
00059870                          1669          
00059870  41F9 00059C06           1670          lea     ET_PLAYER_START, a0
00059876  43F9 00059554           1671          lea     MOVE_INPUT, a1
0005987C  45F9 0005B47C           1672          lea     DELTA_TIME, a2
00059882  2612                    1673          move.l  (a2), d3
00059884  2211                    1674          move.l  (a1), d1
00059886                          1675          
00059886  4280                    1676          clr.l   d0
00059888  43F9 00059932           1677          lea     MOVEMENT_TABLE, a1
0005988E  0801 0000               1678          btst    #BIT_OFFSET_DOWN, d1
00059892  6700 0006               1679          beq     SKIP_DOWN
00059896  08C0 0002               1680          bset    #2, d0
0005989A                          1681          SKIP_DOWN:
0005989A  0801 0008               1682          btst    #BIT_OFFSET_UP, d1
0005989E  6700 0006               1683          beq     SKIP_UP
000598A2  08C0 0003               1684          bset    #3, d0
000598A6                          1685          SKIP_UP:
000598A6  0801 0010               1686          btst    #BIT_OFFSET_RIGHT, d1
000598AA  6700 0006               1687          beq     SKIP_RIGHT
000598AE  08C0 0004               1688          bset    #4, d0
000598B2                          1689          SKIP_RIGHT:
000598B2  0801 0018               1690          btst    #BIT_OFFSET_LEFT, d1
000598B6  6700 0006               1691          beq     SKIP_LEFT
000598BA  08C0 0005               1692          bset    #5, d0
000598BE                          1693          SKIP_LEFT:
000598BE                          1694                        
000598BE  2231 0000               1695          move.l  (a1, d0), d1    ;overwrite d1 with movement vector and be prepared to add it to stage boundaries
000598C2  1028 0000               1696          move.b  GET_VELOCITY(a0), d0         ;Velocity
000598C6  2428 0008               1697          move.l  GET_POSITION(a0), d2         ;Position (Y, X)
000598CA  C1C1                    1698          muls.w  d1, d0                        ;Save the x velocity in d0
000598CC  E480                    1699          asr.l   #2, d0                        ;d0 has 4 fractional bits now after multiplying velocity (2) and moveVector (2). shift right twice.
000598CE  C1C3                    1700          muls.w  d3, d0
000598D0  E680                    1701          asr.l   #3, d0
000598D2  D440                    1702          add.w   d0, d2
000598D4  6C00 0004               1703          bge     NO_CLAMP_X_MIN
000598D8  4242                    1704          clr.w   d2
000598DA                          1705          NO_CLAMP_X_MIN:
000598DA  4841                    1706          swap    d1                            ;add the speed to X position, then clamp it between 0 and STAGE_BORDER_X_MAX - Width
000598DC  4842                    1707          swap    d2
000598DE  4240                    1708          clr.w   d0
000598E0  1028 0000               1709          move.b  GET_VELOCITY(a0), d0
000598E4  C1C1                    1710          muls.w  d1, d0                         ;d1 can be overwritten here forward
000598E6  E480                    1711          asr.l  #2, d0                          ;adding the velocity
000598E8  C1C3                    1712          muls.w  d3, d0
000598EA  E680                    1713          asr.l   #3, d0
000598EC  D440                    1714          add.w   d0, d2          
000598EE  6E00 0004               1715          bgt     NO_CLAMP_Y_MIN
000598F2  4242                    1716          clr.w   d2
000598F4                          1717          NO_CLAMP_Y_MIN:
000598F4  323C 00F0               1718          move.w  #STAGE_BORDER_Y_MAX, d1        ;d1 will be the bounds of the stage - player's height
000598F8  9268 000C               1719          sub.w   GET_SIZE(a0), d1
000598FC  B441                    1720          cmp.w   d1, d2                         ;d2 is position
000598FE  6D00 0004               1721          blt     NO_CLAMP_Y_MAX
00059902  3401                    1722          move.w  d1, d2
00059904                          1723          NO_CLAMP_Y_MAX:     
00059904  4842                    1724          swap    d2 
00059906  4841                    1725          swap    d1
00059908  323C 00BA               1726          move.w  #STAGE_BORDER_X_MAX, d1
0005990C  9268 000E               1727          sub.w   (GET_SIZE+2)(a0), d1
00059910  B441                    1728          cmp.w   d1, d2           
00059912  6D00 0004               1729          blt     NO_CLAMP_X_MAX
00059916  3401                    1730          move.w  d1, d2  
00059918                          1731          NO_CLAMP_X_MAX:     
00059918  2142 0008               1732          move.l  d2, GET_POSITION(a0)           ;NEW POSITION!
0005991C  2002                    1733          move.l  d2, d0
0005991E  4EB9 00058AD2           1734          jsr SET_COLLISION_ZONE
00059924                          1735  
00059924                          1736  
00059924                          1737  
00059924  41F9 00059C06           1738          lea     ET_PLAYER_START, a0
0005992A  4EB9 00058846           1739          jsr     DRAW_PLAYER
00059930                          1740          ;d5 will have something with animations for it.
00059930                          1741                  
00059930                          1742          ;jsr DISPLAY_BMP_DATA
00059930                          1743          
00059930                          1744          ;SEE WHAT NEEDS TO BE RESTORED HERE
00059930                          1745          
00059930  4E75                    1746          rts
00059932                          1747          
00059932                          1748         
00059932                          1749      
00059932                          1750      
00059932                          1751  MOVEMENT_TABLE                       ;upper word = y, lower word = x multiplier. this is basically a signed vector2 with 2 fractional bits.
00059932= 00000000                1752      dc.l        $00000000            ;you pressed NOTHING! You LOSE. GOOD DAY, SIR.
00059936= 00040000                1753      dc.l        $00040000            ;down    
0005993A= FFFC0000                1754      dc.l        $FFFC0000            ;up
0005993E= 00000000                1755      dc.l        $00000000            ;up and down; nothing!
00059942= 00000004                1756      dc.l        $00000004            ;right
00059946= 00030003                1757      dc.l        $00030003            ;right and down!
0005994A= FFFD0003                1758      dc.l        $FFFD0003            ;right and up
0005994E= 00000004                1759      dc.l        $00000004            ;right and up and down = only right
00059952= 0000FFFC                1760      dc.l        $0000FFFC            ;left
00059956= 0003FFFD                1761      dc.l        $0003FFFD            ;downleft
0005995A= FFFDFFFD                1762      dc.l        $FFFDFFFD            ;upleft
0005995E= 0000FFFC                1763      dc.l        $0000FFFC            ;downupleft
00059962= 00000000                1764      dc.l        $00000000            ;leftright
00059966= 00040000                1765      dc.l        $00040000            ;lrdown    
0005996A= FFFC0000                1766      dc.l        $FFFC0000            ;lrup
0005996E= 00000000                1767      dc.l        $00000000            ;lrup and down; nothing!
00059972                          1768   
00059972                          1769  
00059972                          1770  
00059972                          1771  
00059972                          1772  
00059972                          1773  
00059972                          1774  
00059972                          1775  
00059972                          1776  
00059972                          1777  
00059972                          1778  
00059972                          1779  
00059972                          1780  
00059972                          1781  
00059972                          1782  -------------------- end include --------------------
00059972                          1783      INCLUDE                             'src/Spawning.X68'
00059972                          1784  
00059972                          1785  
00059972  =00000008               1786  SPAWN_WAVE_SIZE             EQU     8
00059972                          1787  
00059972  =00000000               1788  GET_SPAWN_HAS_NEXT_WAVE     EQU     0       ;if this is 00, then don't keep going
00059972  =00000001               1789  GET_SPAWN_FORMATION         EQU     1 
00059972  =00000002               1790  GET_SPAWN_POSITION_Y        EQU     2      
00059972  =00000003               1791  GET_SPAWN_POSITION_X        EQU     3
00059972  =00000004               1792  GET_SPAWN_THETA             EQU     4
00059972  =00000006               1793  GET_SPAWN_DELAY             EQU     6       ;how long until I spawn next wave?       
00059972                          1794         
00059972  =00000000               1795  LEVEL_FLAG_INCOMPLETE         EQU       0
00059972  =00000001               1796  LEVEL_FLAG_COMPLETE           EQU       1
00059972                          1797  ;This is called once the timer is activated
00059972                          1798  SPAWN_NEXT_WAVE:
00059972                          1799      
00059972  41F9 00059A32           1800      lea LEVEL_END_FLAG, a0
00059978  1010                    1801      move.b  (a0), d0
0005997A  0C00 0000               1802      cmpi.b  #LEVEL_FLAG_INCOMPLETE, d0
0005997E  6700 0004               1803      beq     LEVEL_NOT_COMPLETED
00059982  4E75                    1804      rts
00059984                          1805      
00059984                          1806      LEVEL_NOT_COMPLETED:
00059984  4280                    1807      clr.l   d0
00059986  4281                    1808      clr.l   d1
00059988  4282                    1809      clr.l   d2
0005998A                          1810      
0005998A                          1811      ;GETTING THE CURRENT WAVE TO SPAWN, AS WELL AS THE FORMATION OFFSET
0005998A  41F9 00059A33           1812      lea     CURR_LEVEL, a0
00059990  1010                    1813      move.b  (a0), d0
00059992  E948                    1814      lsl.w   #4, d0
00059994  41F9 00059A80           1815      lea     LEVEL_DATA, a0
0005999A  2070 0000               1816      move.l  (a0, d0), a0         ;a0 Holds the reference to the level binary.
0005999E  43F9 00059A34           1817      lea     CURR_FORMATION_SPAWN, a1
000599A4  4280                    1818      clr.l   d0
000599A6  1011                    1819      move.b  (a1), d0
000599A8  E748                    1820      lsl.w   #3, d0               ;size of 8, so bit shift left by 3              
000599AA  D1C0                    1821      adda.l   d0, a0              ;a0 Holds the reference to the current wave to spawn.
000599AC  5211                    1822      addi.b  #1, (a1)             ;Updating CURR_FORMATION
000599AE                          1823  
000599AE                          1824      ;SPAWNING THE CURRENT FORMATION
000599AE                          1825  
000599AE  2F08                    1826      move.l  a0, -(SP)   ;not needed for function, more for backup.
000599B0                          1827      
000599B0  1228 0002               1828      move.b GET_SPAWN_POSITION_Y(a0), d1
000599B4  4841                    1829      swap    d1
000599B6  1228 0003               1830      move.b  GET_SPAWN_POSITION_X(a0), d1
000599BA  2F01                    1831      move.l  d1, -(SP)
000599BC  3F28 0004               1832      move.w  GET_SPAWN_THETA(a0), -(SP)
000599C0  1428 0001               1833      move.b  GET_SPAWN_FORMATION(a0), d2
000599C4  3F02                    1834      move.w  d2, -(SP)
000599C6  4EB9 0005955C           1835      jsr     SPAWN_FORMATION
000599CC  508F                    1836      adda.l  #8, SP
000599CE  205F                    1837      move.l  (SP)+, a0  
000599D0                          1838      
000599D0                          1839      ;DEALING WITH NEXT WAVES, most is very self explanatory
000599D0  4280                    1840      clr.l   d0
000599D2                          1841      
000599D2  1028 0000               1842      move.b  GET_SPAWN_HAS_NEXT_WAVE(a0), d0
000599D6  6700 002A               1843      beq     NO_NEXT_WAVE
000599DA                          1844  
000599DA  3028 0006               1845      move.w  GET_SPAWN_DELAY(a0), d0
000599DE  2F3C 00000000           1846      move.l  #0, -(SP)
000599E4  2F3C 00000000           1847      move.l  #0, -(SP)
000599EA  43F9 00059972           1848      lea     SPAWN_NEXT_WAVE, a1
000599F0  2F09                    1849      move.l  a1, -(SP) 
000599F2  2F00                    1850      move.l  d0, -(SP)
000599F4  4EB9 0005A640           1851      jsr SET_TIMER
000599FA  DFFC 00000010           1852      adda.l  #16, SP
00059A00  4E75                    1853      rts 
00059A02                          1854      
00059A02                          1855      NO_NEXT_WAVE:
00059A02  41F9 00059A32           1856      lea LEVEL_END_FLAG, a0
00059A08  10BC 0001               1857      move.b  #LEVEL_FLAG_COMPLETE, (a0)
00059A0C  4E75                    1858      rts 
00059A0E                          1859  
00059A0E                          1860  ;4(SP) = level 
00059A0E                          1861  ;sets the current level to whatever is specified and resets the level   
00059A0E                          1862  SET_STAGE_NUMBER:
00059A0E  41F9 00059A33           1863      lea CURR_LEVEL, a0
00059A14  202F 0004               1864      move.l  4(SP), d0
00059A18  1080                    1865      move.b  d0, (a0)
00059A1A                          1866  ;move everything back to the initial 0 values.
00059A1A                          1867  RESET_LEVEL_SPAWNING:
00059A1A  41F9 00059A32           1868      lea LEVEL_END_FLAG, a0
00059A20  10BC 0000               1869      move.b  #LEVEL_FLAG_INCOMPLETE, (a0)
00059A24  41F9 00059A34           1870      lea CURR_FORMATION_SPAWN, a0
00059A2A  20BC 00000000           1871      move.l  #0, (a0)
00059A30  4E75                    1872      rts
00059A32                          1873  
00059A32= 00                      1874  LEVEL_END_FLAG          dc.b    0           ;set to 1 once the level is done spawning stuff.
00059A33= 00                      1875  CURR_LEVEL              dc.b    0
00059A34= 00000000                1876  CURR_FORMATION_SPAWN    dc.l    0
00059A38                          1877  
00059A38                          1878  DEBUG_LEVEL     incbin      'data/stages/debug_stage'
00059A80                          1879  STAGE_1         ;incbin      'data/stages/stage_1'
00059A80                          1880  STAGE_2         ;incbin      'data/stages/stage_2'
00059A80                          1881  STAGE_3         ;incbin      'data/stages/stage_3'
00059A80                          1882  STAGE_4         ;incbin      'data/stages/stage_4'
00059A80                          1883  
00059A80                          1884  LEVEL_DATA
00059A80= 00059A38                1885      dc.l    DEBUG_LEVEL
00059A84= 00059A80                1886      dc.l    STAGE_1
00059A88= 00059A80                1887      dc.l    STAGE_2
00059A8C= 00059A80                1888      dc.l    STAGE_3
00059A90= 00059A80                1889      dc.l    STAGE_4
00059A94                          1890  ;here's where level data is going to be stored at.
00059A94                          1891  
00059A94                          1892  
00059A94                          1893  -------------------- end include --------------------
00059A94                          1894      INCLUDE                             'src/Entity.X68' 
00059A94                          1895  
00059A94                          1896  
00059A94                          1897  
00059A94                          1898      CLEAR_ENTITIES:
00059A94  72FF                    1899          move.l      #$FFFFFFFF, d1  ;emptying out the table.
00059A96  243C 00FFFFFF           1900          move.l      #$00FFFFFF, d2  ;specifically for setting that the object is inactive.
00059A9C  41F9 00059C06           1901          lea         ENTITY_TABLE_START, a0
00059AA2  103C 004B               1902          move.b      #MAX_NUM_ENTITIES, d0
00059AA6  5300                    1903          subi.b      #1, d0
00059AA8                          1904          ES_LOOP:
00059AA8  20C1                    1905             move.l   d1, (a0)+
00059AAA  20C1                    1906             move.l   d1, (a0)+
00059AAC  20C1                    1907             move.l   d1, (a0)+
00059AAE  20C1                    1908             move.l   d1, (a0)+
00059AB0  20C1                    1909             move.l   d1, (a0)+
00059AB2  20C1                    1910             move.l   d1, (a0)+
00059AB4  20C2                    1911             move.l   d2, (a0)+
00059AB6  20C1                    1912             move.l   d1, (a0)+   
00059AB8  5300                    1913             subi.b   #1, d0 
00059ABA  6CEC                    1914             bge      ES_LOOP 
00059ABC  4E75                    1915          rts    
00059ABE                          1916  
00059ABE                          1917      ;a0 is the start of the index.
00059ABE                          1918      ;d0 is the length. d1 is the entity offset.
00059ABE                          1919      ;d2 as the point to spawn enemy from?
00059ABE                          1920      
00059ABE                          1921      ;CHANGED TO
00059ABE                          1922      
00059ABE                          1923      ;4(SP) is the entity offset
00059ABE                          1924      ;8(SP) is the position to spawn them at
00059ABE                          1925      ;12(SP) is the theta initial
00059ABE                          1926      ;16(SP) is the path offset.
00059ABE                          1927      ;20(SP) is initial speeds
00059ABE                          1928      ;24(SP) is initial thetas
00059ABE                          1929      
00059ABE                          1930      TRY_SPAWN_ENTITY:
00059ABE  4285                    1931              clr.l   d5
00059AC0  4282                    1932              clr.l   d2
00059AC2                          1933              
00059AC2  222F 0004               1934              move.l  4(SP), d1             ;d1 holds the entity offset
00059AC6  E589                    1935              lsl.l   #2, d1
00059AC8                          1936             
00059AC8                          1937              
00059AC8  43F9 0005A60E           1938              lea     ENTITY_DATA_TABLE, a1
00059ACE  D3C1                    1939              adda.l  d1, a1
00059AD0  2251                    1940              move.l  (a1), a1              ;this is the entity data in a1 right now.
00059AD2  41F9 0005A57E           1941              lea     ENTITY_TABLE_BOUNDS, a0
00059AD8                          1942              
00059AD8  3429 001A               1943              move.w  GET_ENTITY_TYPE(a1), d2
00059ADC  E78A                    1944              lsl.l   #3, d2
00059ADE  2030 2004               1945              move.l  (4, a0, d2), d0       ;d0 holds how many items to rifle through
00059AE2  2070 2000               1946              move.l  (a0, d2), a0          ;a0 holds where to start searching
00059AE6                          1947              
00059AE6                          1948              
00059AE6                          1949              
00059AE6                          1950              
00059AE6  5300                    1951              subi.b  #1, d0
00059AE8  EB88                    1952              lsl.l   #5, d0              ;ENTITY SIZE = 32, so I can just shift the value to the left 5 times.
00059AEA                          1953              
00059AEA                          1954              ;mulu.w #ENTITY_SIZE, d0    ;in case this gets calle
00059AEA  0680 00000018           1955              addi.l  #GET_INFO, d0
00059AF0  7A20                    1956              move.l  #ENTITY_SIZE, d5
00059AF2                          1957              
00059AF2                          1958          SEARCH_FOR_NEXT_FREE:
00059AF2  1830 0000               1959              move.b  (a0, d0), d4
00059AF6  6700 000A               1960              beq     FOUND_OBJ       ;if it's not active, it will be 00.
00059AFA  9085                    1961              sub.l   d5, d0
00059AFC  6CF4                    1962              bge     SEARCH_FOR_NEXT_FREE 
00059AFE  4280                    1963              clr.l   d0
00059B00  4E75                    1964              rts
00059B02                          1965          FOUND_OBJ:
00059B02                          1966              
00059B02                          1967              ;finds data in entity table.
00059B02  D1C0                    1968              adda.l  d0, a0
00059B04  91FC 00000018           1969              suba.l  #GET_INFO, a0
00059B0A  2448                    1970              movea.l a0, a2
00059B0C                          1971              
00059B0C                          1972              
00059B0C  24D9                    1973              move.l  (a1)+, (a2)+ 
00059B0E  24D9                    1974              move.l  (a1)+, (a2)+
00059B10  24EF 0008               1975              move.l  8(SP), (a2)+
00059B14  5889                    1976              adda.l  #4, a1
00059B16  24D9                    1977              move.l  (a1)+,(a2)+
00059B18  24D9                    1978              move.l  (a1)+,(a2)+
00059B1A  24D9                    1979              move.l  (a1)+,(a2)+
00059B1C  24D9                    1980              move.l  (a1)+,(a2)+
00059B1E  24FC FFFFFFFF           1981              move.l  #$FFFFFFFF, (a2)+               ;this needs to be a path handler address
00059B24                          1982                                              ;and that path handler address needs to take this
00059B24                          1983  
00059B24                          1984   
00059B24  117C 00FF 0018          1985              move.b  #$FF, GET_INFO(a0)      
00059B2A  222F 000C               1986              move.l  12(SP), d1
00059B2E  1141 0002               1987              move.b  d1, GET_THETA(a0)
00059B32                          1988              
00059B32                          1989              ;Path offset being FFFF means it doesn't want a path handler. No path to follow. Good for basic ass bullets.
00059B32  222F 0010               1990              move.l  16(SP), d1
00059B36  0C01 00FF               1991              cmpi.b  #$FF, d1
00059B3A  6700 0024               1992              beq     NO_PATH_HANDLER
00059B3E  202F 0018               1993              move.l  24(SP), d0
00059B42  242F 0014               1994              move.l  20(SP), d2
00059B46  2F08                    1995              move.l  a0, -(SP)       ;Entity
00059B48  2F00                    1996              move.l  d0, -(SP)   ;Initial Thetas
00059B4A  2F02                    1997              move.l  d2, -(SP)   ;Initial SPeeds
00059B4C  2F01                    1998              move.l  d1, -(SP)       ;PATH OFFSET
00059B4E  4EB9 00058BBC           1999              jsr FIND_NEW_PATH_HANDLER
00059B54  DFFC 0000000C           2000              adda.l  #12, SP
00059B5A  205F                    2001              move.l  (SP)+, a0
00059B5C  2149 001C               2002              move.l  a1, GET_ENTITY_PATH_ADDRESS(a0)
00059B60                          2003              NO_PATH_HANDLER:
00059B60  4E75                    2004              rts
00059B62                          2005       
00059B62                          2006  
00059B62                          2007      ENTITY_UPDATE:        
00059B62  4DF9 00059C26           2008                  lea       ET_PLAYER_BULLETS_START, a6
00059B68  7E07                    2009                  move.l    #(MAX_NUM_PLAYER_BULLETS-1), d7
00059B6A  EB8F                    2010                  lsl.l     #5, d7                ;cuz size of 32 bytes. Easiest money of my life.
00059B6C                          2011                  
00059B6C                          2012                  
00059B6C                          2013                  EU_BULLET_LOOP:        
00059B6C  1036 7018               2014                  move.b  (GET_INFO,a6, d7), d0        
00059B70  6700 002E               2015                  beq EU_BULLET_INACTIVE_OBJ     
00059B74  204E                    2016                  move.l  a6, a0
00059B76  D1C7                    2017                  adda.l  d7, a0
00059B78  2F08                    2018                  move.l    a0, -(SP)
00059B7A  4EB9 00058AA2           2019                  jsr       INVAL_OBJECT
00059B80  205F                    2020                  move.l    (SP)+, a0
00059B82                          2021                    
00059B82  2F0E                    2022                  move.l  a6, -(SP)
00059B84  2F07                    2023                  move.l  d7, -(SP)
00059B86  2F08                    2024                  move.l  a0, -(SP)
00059B88  4EB9 00058C38           2025                  jsr PATH_UPDATES
00059B8E  205F                    2026                  move.l  (SP)+, a0
00059B90  2E1F                    2027                  move.l  (SP)+, d7
00059B92  2C5F                    2028                  move.l  (SP)+, a6
00059B94                          2029  
00059B94  4EB9 00058AD2           2030                  jsr       SET_COLLISION_ZONE
00059B9A  4EB9 00058968           2031                  jsr       DRAW_PLAYER_BULLET
00059BA0                          2032                    
00059BA0                          2033                  EU_BULLET_INACTIVE_OBJ:  
00059BA0  0487 00000020           2034                  subi.l  #ENTITY_SIZE, d7
00059BA6  6CC4                    2035                  bge     EU_BULLET_LOOP
00059BA8                          2036                  
00059BA8                          2037                  
00059BA8  4DF9 00059D46           2038                  lea ET_ENEMIES_START, a6
00059BAE  7E1F                    2039                  move.l  #(MAX_NUM_ENEMIES-1), d7
00059BB0  EB4F                    2040                  lsl #5, d7             
00059BB2                          2041                  
00059BB2                          2042                  EU_ENEMY_LOOP:
00059BB2  1036 7018               2043                  move.b  (GET_INFO,a6, d7), d0
00059BB6  6700 002E               2044                  beq     EU_ENEMY_INACTIVE
00059BBA  204E                    2045                  move.l  a6, a0
00059BBC  D1C7                    2046                  adda.l  d7, a0
00059BBE  2F08                    2047                  move.l  a0, -(SP)
00059BC0  4EB9 00058AA2           2048                  jsr     INVAL_OBJECT
00059BC6  205F                    2049                  move.l  (SP)+, a0
00059BC8                          2050                   
00059BC8                          2051                  
00059BC8  2F0E                    2052                  move.l  a6, -(SP)
00059BCA  2F07                    2053                  move.l  d7, -(SP)
00059BCC  2F08                    2054                  move.l  a0, -(SP)
00059BCE  4EB9 00058C38           2055                  jsr PATH_UPDATES
00059BD4  205F                    2056                  move.l  (SP)+, a0
00059BD6  2E1F                    2057                  move.l  (SP)+, d7
00059BD8  2C5F                    2058                  move.l  (SP)+, a6
00059BDA                          2059                  
00059BDA  4EB9 00058AD2           2060                  jsr     SET_COLLISION_ZONE
00059BE0  4EB9 000588F0           2061                  jsr     DRAW_SLIME
00059BE6                          2062                  
00059BE6                          2063                  EU_ENEMY_INACTIVE:
00059BE6                          2064                  
00059BE6  0487 00000020           2065                  subi.l  #ENTITY_SIZE, d7
00059BEC  6CC4                    2066                  bge     EU_ENEMY_LOOP
00059BEE                          2067                               
00059BEE  4E75                    2068             rts
00059BF0                          2069   
00059BF0                          2070  
00059BF0                          2071  ;4sp = entity to be removed.
00059BF0                          2072  KILL_ENTITY:
00059BF0                          2073  
00059BF0                          2074      
00059BF0                          2075  KILL_ENTITY_NO_POINTS:
00059BF0  206F 0004               2076      move.l  4(SP), a0
00059BF4  117C 0000 0018          2077      move.b  #STATUS_DEAD, GET_INFO(a0)
00059BFA  2F08                    2078      move.l  a0, -(SP)
00059BFC  4EB9 00058AA2           2079      jsr INVAL_OBJECT
00059C02  588F                    2080      adda.l  #4, SP
00059C04                          2081      
00059C04  4E75                    2082      rts
00059C06                          2083  
00059C06                          2084  
00059C06                          2085  EN_FUNC_VAR_TABLE       ;Take Damage, die, collision, draw call, and color.
00059C06                          2086  
00059C06                          2087         
00059C06                          2088  
00059C06                          2089  ENTITY_TABLE_START
00059C06                          2090  ET_PLAYER_START
00059C06                          2091      ds.b        MAX_NUM_PLAYERS*ENTITY_SIZE                   
00059C26                          2092  ET_PLAYER_BULLETS_START
00059C26                          2093      ds.b        MAX_NUM_PLAYER_BULLETS*ENTITY_SIZE
00059D26                          2094  ET_PLAYER_SWORD_START
00059D26                          2095      ds.b        MAX_NUM_PLAYER_SWORD*ENTITY_SIZE
00059D46                          2096  ET_ENEMIES_START
00059D46                          2097      ds.b        MAX_NUM_ENEMIES*ENTITY_SIZE
0005A146                          2098  ET_ENEMY_BULLETS_START
0005A146                          2099      ds.b        MAX_NUM_ENEMY_BULLETS*ENTITY_SIZE
0005A506                          2100  ET_PICKUPS_START
0005A506                          2101      ds.b        MAX_NUM_PICKUPS*ENTITY_SIZE
0005A566                          2102  ET_END
0005A566                          2103  
0005A566                          2104  
0005A566                          2105  
0005A566                          2106  ENTITY_NUM_ACTIVE
0005A566= 00000000                2107      dc.l    0
0005A56A= 00000000                2108      dc.l    0
0005A56E= 00000000                2109      dc.l    0
0005A572= 00000000                2110      dc.l    0
0005A576= 00000000                2111      dc.l    0
0005A57A= 00000000                2112      dc.l    0
0005A57E                          2113  
0005A57E                          2114  ;when iterating through to find what to spawn use this. based on the 'layer' of the object, finds an open entity spot in the pool. The rightmost 
0005A57E                          2115  ENTITY_TABLE_BOUNDS
0005A57E= 00059C06 00000001       2116      dc.l    ET_PLAYER_START, MAX_NUM_PLAYERS
0005A586= 00059C26 00000008       2117      dc.l    ET_PLAYER_BULLETS_START, MAX_NUM_PLAYER_BULLETS
0005A58E= 00059D46 00000020       2118      dc.l    ET_ENEMIES_START, MAX_NUM_ENEMIES
0005A596= 0005A146 0000001E       2119      dc.l    ET_ENEMY_BULLETS_START, MAX_NUM_ENEMY_BULLETS
0005A59E= 00059D26 00000001       2120      dc.l    ET_PLAYER_SWORD_START, MAX_NUM_PLAYER_SWORD
0005A5A6= 0005A506 00000003       2121      dc.l    ET_PICKUPS_START, MAX_NUM_PICKUPS 
0005A5AE                          2122  
0005A5AE                          2123  PLAYER_DATA             INCBIN      'data/Entities/PlayerData.bin'
0005A5CE                          2124  SLIME_DATA              INCBIN      'data/Entities/SlimeData.bin'
0005A5EE                          2125  PLAYER_BULLET_DATA      INCBIN      'data/Entities/PlayerBulletData.bin'
0005A60E                          2126  
0005A60E                          2127  ENTITY_DATA_TABLE:
0005A60E= 0005A5AE                2128      dc.l    PLAYER_DATA
0005A612= 0005A5CE                2129      dc.l    SLIME_DATA
0005A616= 0005A5EE                2130      dc.l    PLAYER_BULLET_DATA
0005A61A                          2131  
0005A61A                          2132  
0005A61A                          2133  
0005A61A                          2134  
0005A61A                          2135  
0005A61A                          2136  
0005A61A                          2137  
0005A61A                          2138  
0005A61A                          2139  
0005A61A                          2140  
0005A61A                          2141  -------------------- end include --------------------
0005A61A                          2142      INCLUDE                             'src/Timer.X68'
0005A61A                          2143  
0005A61A                          2144  
0005A61A                          2145  ;Each timer is gonna be in seconds
0005A61A                          2146  
0005A61A                          2147  
0005A61A                          2148  
0005A61A  =00000096               2149  NUM_TIMERS       EQU     150
0005A61A                          2150  
0005A61A  =00000010               2151  TIMER_SIZE      EQU     16
0005A61A                          2152  
0005A61A  =00000000               2153  GET_TIME_REMAINING   EQU    0           ;lw
0005A61A  =00000004               2154  GET_FUNCTION_ADDR    EQU    4            ;lw
0005A61A  =00000008               2155  GET_FUNC_INPUT_1     EQU    8           ;2 lws
0005A61A  =0000000C               2156  GET_FUNC_INPUT_2     EQU    12
0005A61A                          2157      
0005A61A                          2158  
0005A61A                          2159      
0005A61A                          2160  CLEAR_TIMERS:
0005A61A  41F9 0005A704           2161      lea ALL_TIMERS, a0
0005A620  70FF                    2162      move.l  #$FFFFFFFF, d0
0005A622  2E3C 00000096           2163      move.l  #NUM_TIMERS, d7
0005A628                          2164      CLEAR_TIMER_LOOP:
0005A628  20C0                    2165      move.l  d0, (a0)+
0005A62A  20C0                    2166      move.l  d0, (a0)+
0005A62C  20C0                    2167      move.l  d0, (a0)+
0005A62E  20C0                    2168      move.l  d0, (a0)+
0005A630  5387                    2169      subi.l  #1, d7
0005A632  6EF4                    2170      bgt CLEAR_TIMER_LOOP
0005A634  41F9 0005A700           2171      lea CURR_TIMER, a0
0005A63A  20BC 00000000           2172      move.l  #0, (a0)
0005A640                          2173  rts
0005A640                          2174  
0005A640                          2175  
0005A640                          2176  ;4 SP = Value to put in timer
0005A640                          2177  ;8 SP = Function Address
0005A640                          2178  ;12 SP = Function Input 1
0005A640                          2179  ;16 SP = Function Input 2
0005A640                          2180  
0005A640                          2181  
0005A640                          2182  
0005A640                          2183  
0005A640                          2184  SET_TIMER:
0005A640                          2185  
0005A640  202F 0004               2186      move.l  4(SP), d0
0005A644  6600 0018               2187      bne     NOT_INSTANT_TIMER
0005A648                          2188      
0005A648                          2189      ;in the event that the timer is 0, call the function instantly.
0005A648                          2190      
0005A648  202F 0010               2191      move.l  16(SP), d0
0005A64C  222F 000C               2192      move.l  12(SP), d1
0005A650  206F 0008               2193      move.l  8(SP), a0
0005A654  2F00                    2194      move.l  d0, -(SP)
0005A656  2F01                    2195      move.l  d1, -(SP)
0005A658  4E90                    2196      jsr     (a0)
0005A65A  508F                    2197      adda.l  #8, SP  
0005A65C  4E75                    2198      rts
0005A65E                          2199      
0005A65E                          2200      NOT_INSTANT_TIMER:
0005A65E  41F9 0005A700           2201      lea CURR_TIMER, a0
0005A664  2010                    2202      move.l  (a0), d0
0005A666  E988                    2203      lsl.l   #4, d0                                  ;getting the offset based on CurrTimer and size of a timer.
0005A668  43F9 0005A704           2204      lea ALL_TIMERS, a1
0005A66E                          2205      IS_IT_EMPTY:
0005A66E  2231 0000               2206      move.l  (GET_TIME_REMAINING, a1,d0), d1         ;if the time remaining is <= 0, then that timer is no longer in use.
0005A672  6F00 0014               2207      ble MOVE_VALUES
0005A676                          2208      
0005A676                          2209      ;subtract 
0005A676  0480 00000010           2210      subi.l  #TIMER_SIZE, d0                         
0005A67C  6CF0                    2211      bge IS_IT_EMPTY
0005A67E  0680 00000960           2212      addi.l  #(NUM_TIMERS<<4), d0                    ;going to be called when d0 is at "index -1", and adding the total length to hit index 99.
0005A684  6CE8                    2213      bge IS_IT_EMPTY
0005A686  4E75                    2214      rts
0005A688                          2215     
0005A688                          2216      MOVE_VALUES:
0005A688  D3C0                    2217          adda.l  d0, a1  
0005A68A  236F 0004 0000          2218          move.l  4(SP), GET_TIME_REMAINING(a1)
0005A690  236F 0008 0004          2219          move.l  8(SP), GET_FUNCTION_ADDR(a1)
0005A696  236F 000C 0008          2220          move.l  12(SP), GET_FUNC_INPUT_1(a1)
0005A69C  236F 0010 000C          2221          move.l  16(SP), GET_FUNC_INPUT_2(a1)
0005A6A2  41F9 0005A700           2222          lea CURR_TIMER, a0
0005A6A8  E888                    2223          lsr.l   #4, d0
0005A6AA  2080                    2224          move.l  d0, (a0)
0005A6AC  4E75                    2225      rts
0005A6AE                          2226  
0005A6AE                          2227  UPDATE_TIMERS:
0005A6AE                          2228      ;subtract delta time from every timer. 
0005A6AE  4287                    2229      clr.l   d7
0005A6B0  41F9 0005B47C           2230      lea     DELTA_TIME, a0
0005A6B6  2010                    2231      move.l  (a0), d0
0005A6B8  7210                    2232      move.l  #TIMER_SIZE, d1
0005A6BA  41F9 0005A704           2233      lea     ALL_TIMERS, a0
0005A6C0  2E3C 00000096           2234      move.l  #NUM_TIMERS, d7
0005A6C6                          2235      
0005A6C6                          2236      UP_TIM_LOOP:
0005A6C6  2428 0000               2237      move.l  GET_TIME_REMAINING(a0), d2
0005A6CA  6F00 002C               2238      ble     INC_LOOP               ;if the timer is 0, then don't bother updating it.
0005A6CE  9480                    2239      sub.l   d0, d2
0005A6D0  2142 0000               2240      move.l  d2, GET_TIME_REMAINING(a0)
0005A6D4  6E00 0022               2241      bgt     INC_LOOP
0005A6D8                          2242      ;if they hit or go below 0, set the time remaining to 0 and go to FUNC_ADDR with this timer's address in the stack
0005A6D8                          2243      ;(because you're just gonna read GET_FUNC_INPUT_1 and GET_FUNC_INPUT_2 from here).
0005A6D8                          2244      
0005A6D8  2F07                    2245      move.l  d7, -(SP)
0005A6DA  2F01                    2246      move.l  d1, -(SP)
0005A6DC  2F00                    2247      move.l  d0, -(SP)  
0005A6DE  2F08                    2248      move.l  a0, -(SP)
0005A6E0                          2249      
0005A6E0  2F28 000C               2250      move.l  GET_FUNC_INPUT_2(a0), -(SP)
0005A6E4  2F28 0008               2251      move.l  GET_FUNC_INPUT_1(a0), -(SP)
0005A6E8  2268 0004               2252      move.l  GET_FUNCTION_ADDR(a0), a1
0005A6EC  4E91                    2253      jsr     (a1)
0005A6EE                          2254      
0005A6EE  508F                    2255      adda.l  #8, SP
0005A6F0  205F                    2256      move.l  (sp)+, a0
0005A6F2  201F                    2257      move.l  (sp)+, d0
0005A6F4  221F                    2258      move.l  (SP)+, d1
0005A6F6  2E1F                    2259      move.l  (SP)+, d7
0005A6F8                          2260  
0005A6F8                          2261  
0005A6F8                          2262      INC_LOOP:  
0005A6F8  D1C1                    2263      adda.l   d1, a0
0005A6FA  5307                    2264      subi.b  #1, d7
0005A6FC  66C8                    2265      bne UP_TIM_LOOP
0005A6FE  4E75                    2266      rts
0005A700                          2267  
0005A700                          2268      
0005A700= 00000000                2269  CURR_TIMER      dc.l       0       
0005A704                          2270  ALL_TIMERS      ds.b       NUM_TIMERS*TIMER_SIZE
0005B064                          2271  
0005B064                          2272  
0005B064                          2273  
0005B064                          2274  
0005B064                          2275  
0005B064                          2276  
0005B064                          2277  
0005B064                          2278  
0005B064                          2279  
0005B064                          2280  
0005B064                          2281  -------------------- end include --------------------
0005B064                          2282      INCLUDE                             'src/OnCollision.X68'
0005B064  =00000006               2283  NUM_COLLISION_ROWS          EQU         6
0005B064                          2284  
0005B064                          2285  NIL:
0005B064  4E75                    2286      rts
0005B066                          2287      
0005B066                          2288  DESTROY_OBJ:
0005B066                          2289  
0005B066  137C 0000 0018          2290      move.b  #STATUS_DEAD, GET_INFO(a1)
0005B06C  2F08                    2291      move.l  a0, -(SP)
0005B06E  2F09                    2292      move.l  a1, -(SP)
0005B070  4EB9 00059BF0           2293      jsr KILL_ENTITY
0005B076  225F                    2294      move.l  (SP)+, a1
0005B078  205F                    2295      move.l  (SP)+, a0
0005B07A  4E75                    2296      rts
0005B07C                          2297      
0005B07C                          2298  CHECK_BULLET_PIERCE:
0005B07C                          2299      
0005B07C  4E75                    2300      rts
0005B07E                          2301  
0005B07E                          2302  DEAL_DAMAGE:
0005B07E  3029 0016               2303      move.w  GET_HEALTH(a1), d0
0005B082  4241                    2304      clr.w   d1
0005B084  1228 0007               2305      move.b  GET_POWER(a0), d1
0005B088  9041                    2306      sub.w   d1, d0
0005B08A  3340 0016               2307      move.w  d0, GET_HEALTH(a1)
0005B08E  6F00 0004               2308      ble     KILL_OBJ
0005B092  4E75                    2309      rts     
0005B094                          2310      KILL_OBJ:
0005B094  2F08                    2311      move.l  a0, -(SP)
0005B096  2F09                    2312      move.l  a1, -(SP)
0005B098  4EB9 00059BF0           2313      jsr KILL_ENTITY
0005B09E  225F                    2314      move.l  (SP)+, a1
0005B0A0  205F                    2315      move.l  (SP)+, a0
0005B0A2  4E75                    2316      rts
0005B0A4                          2317      
0005B0A4                          2318  GIVE_BONUS:
0005B0A4  4E75                    2319      rts
0005B0A6                          2320  
0005B0A6                          2321  ;In this table, the TOP interacts with the SIDE
0005B0A6                          2322  ON_COLLISION_FUNCTIONS:;PLAYER     PLAYER_BULLET    ENEMY   ENEMY_BULLET    SWORD(?)            PICKUP
0005B0A6= 0005B064 0005B064 ...   2323      dc.l                NIL,        NIL,            DESTROY_OBJ,    DEAL_DAMAGE,    NIL,                GIVE_BONUS         ;PLAYER
0005B0BE= 0005B064 0005B064 ...   2324      dc.l                NIL,        NIL,            DESTROY_OBJ,    NIL,      NIL,                NIL          ;PLAYER_BULLET
0005B0D6= 0005B064 0005B07E ...   2325      dc.l                NIL, DEAL_DAMAGE,    NIL,    NIL,            DEAL_DAMAGE,        NIL                ;ENEMY
0005B0EE= 0005B064 0005B064 ...   2326      dc.l                NIL,        NIL,            NIL,    NIL,            DESTROY_OBJ,        NIL                ;ENEMY_BULLET
0005B106= 0005B064 0005B064 ...   2327      dc.l                NIL,        NIL,            NIL,    NIL,            NIL,                NIL                ;SWORD
0005B11E= 0005B064 0005B064 ...   2328      dc.l                NIL,        NIL,            NIL,    NIL,            NIL,                NIL                ;PICKUP
0005B136                          2329                           
0005B136                          2330      
0005B136                          2331      
0005B136                          2332  ;a0 and a1 are objects that are colliding.
0005B136                          2333  ON_COLLISION:
0005B136                          2334  
0005B136  4286                    2335      clr.l   d6
0005B138  4287                    2336      clr.l   d7
0005B13A  48C0                    2337      ext.l   d0
0005B13C  48C1                    2338      ext.l   d1
0005B13E  D1C0                    2339      adda.l  d0, a0                                  ;a0 is player, a1 is slimberly
0005B140  D3C1                    2340      adda.l  d1, a1
0005B142                          2341      
0005B142  1C28 001B               2342      move.b  (GET_ENTITY_TYPE+1)(a0), d6
0005B146  1E29 001B               2343      move.b  (GET_ENTITY_TYPE+1)(a1), d7
0005B14A  45F9 0005B0A6           2344      lea     ON_COLLISION_FUNCTIONS, a2
0005B150  CEFC 0006               2345      mulu.w  #NUM_COLLISION_ROWS, d7                 ;Getting the type of collision occuring for a1 onto a0.
0005B154  E58E                    2346      lsl.l   #2, d6
0005B156  E58F                    2347      lsl.l   #2, d7
0005B158  DE46                    2348      add.w   d6, d7
0005B15A  2032 7000               2349      move.l  (a2, d7), d0
0005B15E                          2350      
0005B15E  1C29 001B               2351      move.b  (GET_ENTITY_TYPE+1)(a1), d6                 ;Getting the type of collision ocurring for a1 onto a0
0005B162  1E28 001B               2352      move.b  (GET_ENTITY_TYPE+1)(a0), d7
0005B166  CEFC 0006               2353      mulu.w  #NUM_COLLISION_ROWS, d7
0005B16A  E58E                    2354      lsl.l   #2, d6
0005B16C  E58F                    2355      lsl.l   #2, d7
0005B16E  DE46                    2356      add.w   d6, d7
0005B170  2232 7000               2357      move.l  (a2, d7), d1
0005B174                          2358      
0005B174  2A40                    2359      move.l  d0, a5
0005B176  2C41                    2360      move.l  d1, a6
0005B178                          2361      
0005B178  4E95                    2362      jsr     (a5)
0005B17A  2449                    2363      move.l  a1, a2
0005B17C  2248                    2364      move.l  a0, a1
0005B17E  204A                    2365      move.l  a2, a0
0005B180  4E96                    2366      jsr     (a6)
0005B182                          2367      
0005B182  4E75                    2368      rts
0005B184                          2369      
0005B184                          2370      
0005B184                          2371  
0005B184                          2372  
0005B184                          2373  
0005B184                          2374  -------------------- end include --------------------
0005B184                          2375      INCLUDE                             'src/Collision.X68'
0005B184                          2376   
0005B184                          2377      ;COLLISION CHALLENGES:
0005B184                          2378      ;   * Backup as few registers as humanly possible. This will be called super often, so less memory reads is better.
0005B184                          2379      ;   * Optimize checks to be as fast as possible. The faster collision is, the better.
0005B184                          2380      ;       *   less outer loops = better. Try to set it so the thing with the least objects will be in d0/a0 and the most in d1/a1.
0005B184                          2381      
0005B184                          2382      HANDLE_COLLISION:
0005B184                          2383          ;PLAYER_BULLETS <==> ENEMIES.
0005B184                          2384       
0005B184  41F9 00059C26           2385          lea     ET_PLAYER_BULLETS_START, a0
0005B18A  43F9 00059D46           2386          lea     ET_ENEMIES_START, a1
0005B190  7008                    2387          move.l  #MAX_NUM_PLAYER_BULLETS, d0
0005B192  7220                    2388          move.l  #MAX_NUM_ENEMIES, d1
0005B194  4EB9 0005B1FA           2389          jsr COLLISION_LAYER_CHECKS
0005B19A                          2390          
0005B19A                          2391          ;ENEMIES <==> PLAYERS
0005B19A  43F9 00059D46           2392          lea     ET_ENEMIES_START, a1
0005B1A0  41F9 00059C06           2393          lea     ET_PLAYER_START, a0
0005B1A6  7220                    2394          move.l  #MAX_NUM_ENEMIES, d1
0005B1A8  7001                    2395          move.l  #MAX_NUM_PLAYERS, d0
0005B1AA  4EB9 0005B1FA           2396          jsr COLLISION_LAYER_CHECKS
0005B1B0                          2397          
0005B1B0                          2398          ;PLAYERS <==> ENEMY BULLETS
0005B1B0  43F9 0005A146           2399          lea     ET_ENEMY_BULLETS_START, a1
0005B1B6  41F9 00059C06           2400          lea     ET_PLAYER_START, a0
0005B1BC  721E                    2401          move.l  #MAX_NUM_ENEMY_BULLETS, d1
0005B1BE  7001                    2402          move.l  #MAX_NUM_PLAYERS, d0
0005B1C0  4EB9 0005B1FA           2403          jsr COLLISION_LAYER_CHECKS
0005B1C6                          2404  
0005B1C6                          2405      
0005B1C6                          2406          ;PLAYER_SWORD <==> ENEMIES & ENEMY_BULLETS
0005B1C6  41F9 00059D26           2407          lea     ET_PLAYER_SWORD_START, a0
0005B1CC  43F9 00059D46           2408          lea     ET_ENEMIES_START, a1
0005B1D2  7001                    2409          move.l  #MAX_NUM_PLAYER_SWORD, d0 
0005B1D4  7220                    2410          move.l  #MAX_NUM_ENEMIES, d1
0005B1D6  0681 0000001E           2411          add.l   #MAX_NUM_ENEMY_BULLETS, d1   ;In memory, they are right next to each other, so for now, this is a small optimization that can be made.
0005B1DC  4EB9 0005B1FA           2412          jsr COLLISION_LAYER_CHECKS          
0005B1E2                          2413          
0005B1E2                          2414          ;PICKUPS <==> PLAYER
0005B1E2  43F9 0005A506           2415          lea     ET_PICKUPS_START, a1
0005B1E8  41F9 00059C06           2416          lea     ET_PLAYER_START, a0
0005B1EE  7203                    2417          move.l  #MAX_NUM_PICKUPS, d1
0005B1F0  7001                    2418          move.l  #MAX_NUM_PLAYERS, d0
0005B1F2  4EB9 0005B1FA           2419          jsr COLLISION_LAYER_CHECKS
0005B1F8  4E75                    2420          rts
0005B1FA                          2421          
0005B1FA                          2422          
0005B1FA                          2423          
0005B1FA                          2424      ;a0 is the index of the checker layer (checker layer)
0005B1FA                          2425      ;d0 is the number of loops for a0 - 1
0005B1FA                          2426      ;a1 is the index the collisions
0005B1FA                          2427      ;d1 is the number of loops for a1 - 1.  
0005B1FA                          2428          
0005B1FA                          2429          
0005B1FA                          2430      COLLISION_LAYER_CHECKS:
0005B1FA                          2431  
0005B1FA  5340                    2432          subi.w  #1, d0              ;subtracting 1 to account for 0 indexing.
0005B1FC  5341                    2433          subi.w  #1, d1   
0005B1FE  4840                    2434          swap    d0
0005B200  3001                    2435          move.w  d1, d0
0005B202  4840                    2436          swap    d0      
0005B204                          2437  
0005B204  EB88                    2438          lsl.l   #5, d0      
0005B206  EB49                    2439          lsl.w   #5, d1                  
0005B208                          2440          ;backing up inner loop max value in d0. Need an extra register, and keeping d7 open for returns.
0005B208                          2441          ;Ideally, collision checks should not back anything up because they will be called so much every single frame.
0005B208  45F9 0005B2D4           2442          lea CLOSE_COLLISION_TABLE, a2    
0005B20E                          2443          CC_PB_OUTER_LOOP:
0005B20E  1430 0018               2444              move.b  (GET_INFO,a0, d0), d2         ;d2 holds player bullet info
0005B212  6700 0044               2445              beq     ITERATE_OUT
0005B216                          2446              CC_PB_INNER_LOOP:
0005B216  1631 1018               2447                  move.b  GET_INFO(a1,d1), d3     ;d3 holds enemy info
0005B21A  6700 0036               2448                  beq     ITERATE_IN
0005B21E                          2449                                                  ;at this point, both bullet and enemy are active and we do a collision check.
0005B21E  1430 0019               2450                  move.b  (GET_INFO+1,a0, d0), d2    ;Getting collision quadrant
0005B222  4882                    2451                  ext.w   d2
0005B224  1631 1019               2452                  move.b  (GET_INFO+1,a1,d1), d3   ;Getting collision quadrant  
0005B228  4883                    2453                  ext.w   d3  
0005B22A  E34A                    2454                  lsl.w   #1, d2
0005B22C  3832 2000               2455                  move.w  (a2, d2), d4
0005B230  0704                    2456                  btst  d3, d4
0005B232  6700 001E               2457                  beq     ITERATE_IN              ;if the bit is not set, there is no collision check.
0005B236  2F00                    2458                  move.l  d0, -(SP)
0005B238  2F01                    2459                  move.l  d1, -(SP)
0005B23A  2F02                    2460                  move.l  d2, -(SP)
0005B23C  2F08                    2461                  move.l  a0, -(SP)
0005B23E  2F09                    2462                  move.l  a1, -(SP)
0005B240  48C0                    2463                  ext.l   d0
0005B242  4EB9 0005B266           2464                  jsr COLLISION_BOX_OVERLAP
0005B248  225F                    2465                  move.l  (SP)+, a1
0005B24A  205F                    2466                  move.l  (SP)+, a0
0005B24C  241F                    2467                  move.l  (SP)+, d2
0005B24E  221F                    2468                  move.l  (SP)+, d1
0005B250  201F                    2469                  move.l  (SP)+, d0
0005B252                          2470                  ITERATE_IN:
0005B252  0441 0020               2471                  subi.w  #ENTITY_SIZE, d1
0005B256  6CBE                    2472                  bge     CC_PB_INNER_LOOP
0005B258                          2473              
0005B258                          2474              ITERATE_OUT:
0005B258  4840                    2475              swap    d0
0005B25A  3200                    2476              move.w  d0, d1
0005B25C  4840                    2477              swap    d0
0005B25E  0440 0020               2478              subi.w  #ENTITY_SIZE, d0
0005B262  6CAA                    2479              bge     CC_PB_OUTER_LOOP
0005B264  4E75                    2480          rts
0005B266                          2481  
0005B266                          2482      ;arguments are in a0, d0, a1, and d1.
0005B266                          2483      ;(a0, d0) is the location of 1 object's data,
0005B266                          2484      ;(a1, d1) is the location of another object's data.
0005B266                          2485      ;return value in d7.b. $FF = there was a collision, $00 = there was no collision
0005B266                          2486      
0005B266                          2487      COLLISION_BOX_OVERLAP:
0005B266                          2488          ;Gets the top left corner of object, adds the Top Left Collision Box offset to them to get where the collision box starts.
0005B266                          2489          
0005B266  2430 0008               2490          move.l  (GET_POSITION,a0,d0),d2
0005B26A  2631 1008               2491          move.l  (GET_POSITION,a1,d1),d3
0005B26E  2830 0010               2492          move.l  GET_COLLISION_BOX_TL(a0,d0),d4
0005B272                          2493          
0005B272  D444                    2494          add.w   d4, d2
0005B274  4842                    2495          swap    d2
0005B276  4844                    2496          swap    d4
0005B278  D444                    2497          add.w   d4, d2
0005B27A                          2498          
0005B27A  2831 1010               2499          move.l  GET_COLLISION_BOX_TL(a1,d1),d4
0005B27E  D644                    2500          add.w   d4, d3
0005B280  4843                    2501          swap    d3
0005B282  4844                    2502          swap    d4
0005B284  D644                    2503          add.w   d4, d3
0005B286                          2504          
0005B286  1830 0015               2505          move.b  (GET_COLLISION_BOX_BOUNDS+1,a0, d0), d4             ;Y first, then X
0005B28A                          2506          
0005B28A                          2507          
0005B28A  4844                    2508          swap    d4
0005B28C  1830 0014               2509          move.b  (GET_COLLISION_BOX_BOUNDS,a0,d0),d4
0005B290                          2510          
0005B290  1A31 1015               2511          move.b  (GET_COLLISION_BOX_BOUNDS+1,a1, d1), d5
0005B294  4845                    2512          swap    d5
0005B296  1A31 1014               2513          move.b  (GET_COLLISION_BOX_BOUNDS,a1, d1), d5
0005B29A                          2514          ;d2 and d3 are set as XY right now. Collision box bounds are stored as YX, now at XY.
0005B29A                          2515          ;TL Corners in d2 and d3, and their bounds are in d4 and d5 respectively.
0005B29A                          2516          ;top left corner of object 1 y + height                  
0005B29A  3C02                    2517          move.w  d2, d6
0005B29C  DC44                    2518          add.w   d4, d6 
0005B29E  BC43                    2519          cmp.w   d3, d6          ;if object2.y < object1.y + height, don't branch
0005B2A0  6D00 0030               2520          blt     NO_COLLISION
0005B2A4                          2521          
0005B2A4  3C03                    2522          move.w  d3, d6
0005B2A6  DC45                    2523          add.w   d5, d6
0005B2A8  BC42                    2524          cmp.w   d2, d6
0005B2AA  6D00 0026               2525          blt     NO_COLLISION    ;if object1.y < object2.y + height, don't branch
0005B2AE                          2526          
0005B2AE  4842                    2527          swap    d2
0005B2B0  4843                    2528          swap    d3
0005B2B2  4844                    2529          swap    d4
0005B2B4  4845                    2530          swap    d5
0005B2B6                          2531          
0005B2B6  3C02                    2532          move.w  d2, d6
0005B2B8  DC44                    2533          add.w   d4, d6
0005B2BA  BC43                    2534          cmp.w   d3, d6
0005B2BC  6D00 0014               2535          blt     NO_COLLISION    ;if object2.x < object1.x + width, don't branch
0005B2C0                          2536          
0005B2C0  3C03                    2537          move.w  d3, d6
0005B2C2  DC45                    2538          add.w   d5, d6
0005B2C4  BC42                    2539          cmp.w   d2, d6
0005B2C6  6D00 000A               2540          blt     NO_COLLISION    ;if object1.x < object2.x + width, don't branch
0005B2CA                          2541          
0005B2CA                          2542          COLLISION:
0005B2CA  4EB9 0005B136           2543          jsr ON_COLLISION
0005B2D0  4E75                    2544          rts
0005B2D2                          2545          
0005B2D2                          2546          NO_COLLISION:
0005B2D2  4E75                    2547          rts
0005B2D4                          2548          
0005B2D4                          2549  
0005B2D4                          2550  
0005B2D4                          2551  CLOSE_COLLISION_TABLE:     
0005B2D4= 0033                    2552      dc.w   $0033    ;0
0005B2D6= 0077                    2553      dc.w   $0077    ;1
0005B2D8= 00EE                    2554      dc.w   $00EE    ;2
0005B2DA= 00CC                    2555      dc.w   $00CC    ;3
0005B2DC= 0333                    2556      dc.w   $0333    ;4
0005B2DE= 0777                    2557      dc.w   $0777    ;5
0005B2E0= 0EEE                    2558      dc.w   $0EEE    ;6
0005B2E2= 0CCC                    2559      dc.w   $0CCC    ;7
0005B2E4= 3330                    2560      dc.w   $3330    ;8
0005B2E6= 7770                    2561      dc.w   $7770    ;9
0005B2E8= EEE0                    2562      dc.w   $EEE0    ;A
0005B2EA= CCC0                    2563      dc.w   $CCC0    ;B
0005B2EC= 3300                    2564      dc.w   $3300    ;C
0005B2EE= 7700                    2565      dc.w   $7700    ;D
0005B2F0= EE00                    2566      dc.w   $EE00    ;E
0005B2F2= CC00                    2567      dc.w   $CC00    ;F
0005B2F4                          2568  
0005B2F4                          2569  ;All function pointers
0005B2F4                          2570  
0005B2F4                          2571  
0005B2F4                          2572  
0005B2F4                          2573  
0005B2F4                          2574  
0005B2F4                          2575  
0005B2F4                          2576  
0005B2F4                          2577  
0005B2F4                          2578  
0005B2F4                          2579  
0005B2F4                          2580  
0005B2F4                          2581  
0005B2F4                          2582  -------------------- end include --------------------
0005B2F4                          2583      INCLUDE                             'src/Init.X68'
0005B2F4                          2584  
0005B2F4                          2585  
0005B2F4                          2586  
0005B2F4                          2587  INIT:
0005B2F4  103C 005D               2588     move.b  #93, d0
0005B2F8  123C 0002               2589      move.b  #2, d1
0005B2FC  4E4F                    2590      trap    #15
0005B2FE                          2591      
0005B2FE  41F9 0005B478           2592      lea     TIME_LAST_UPDATE, a0
0005B304  103C 0008               2593      move.b  #8, d0
0005B308  4E4F                    2594      trap    #15
0005B30A  2081                    2595      move.l  d1, (a0)
0005B30C                          2596      
0005B30C                          2597      
0005B30C                          2598      
0005B30C  303C 005C               2599      move.w  #92, d0
0005B310  123C 0011               2600      move.b  #17, d1
0005B314  4E4F                    2601      trap    #15
0005B316                          2602  
0005B316                          2603  
0005B316                          2604         ;set screen size
0005B316  323C 0400               2605      move.w  #SCREEN_SIZE_PIXELS_X, d1   
0005B31A  4841                    2606      swap    d1
0005B31C  323C 03C0               2607      move.w  #SCREEN_SIZE_PIXELS_Y, d1
0005B320  303C 0021               2608      move.w  #33, d0
0005B324  4E4F                    2609      trap    #15
0005B326  4280                    2610      clr.l   d0
0005B328  4281                    2611      clr.l   d1
0005B32A  4E75                    2612      rts
0005B32C                          2613      
0005B32C                          2614  CREATE_HUD:
0005B32C                          2615      ;Draws the hud on the untraversable part of the screen.
0005B32C  41F8 1000               2616      lea SPR_HUD, a0
0005B330  4285                    2617      clr.l   d5
0005B332  3C3C 00F0               2618      move.w  #HUD_HEIGHT, d6
0005B336  4846                    2619      swap    d6
0005B338  3C3C 0046               2620      move.w  #HUD_WIDTH, d6
0005B33C  3E3C FFFC               2621      move.w  #HUD_OFFSET_Y, d7
0005B340  4847                    2622      swap    d7
0005B342  3E3C 02EC               2623      move.w  #HUD_OFFSET_X, d7
0005B346  4EB9 00059340           2624      jsr DISPLAY_BMP_DATA
0005B34C                          2625      
0005B34C  303C 005E               2626      move.w  #94, d0     
0005B350  4E4F                    2627      trap    #15
0005B352                          2628      
0005B352                          2629      ;Swap buffers and do it again!
0005B352  41F8 1000               2630      lea SPR_HUD, a0
0005B356  4285                    2631      clr.l   d5
0005B358  3C3C 00F0               2632      move.w  #HUD_HEIGHT, d6
0005B35C  4846                    2633      swap    d6
0005B35E  3C3C 0046               2634      move.w  #HUD_WIDTH, d6
0005B362  3E3C FFFC               2635      move.w  #HUD_OFFSET_Y, d7
0005B366  4847                    2636      swap    d7
0005B368  3E3C 02EC               2637      move.w  #HUD_OFFSET_X, d7
0005B36C  4EB9 00059340           2638      jsr DISPLAY_BMP_DATA
0005B372  4E75                    2639      rts
0005B374                          2640  
0005B374                          2641  RESET_INIT:
0005B374  303C 000B               2642      move.w  #11, d0         ;clears the screen
0005B378  323C FF00               2643      move.w  #$FF00, d1
0005B37C  4E4F                    2644      trap    #15
0005B37E                          2645      
0005B37E                          2646  
0005B37E  41F9 0005B480           2647      lea GAME_STATE, a0      
0005B384  10BC 0001               2648      move.b  #GAME_STATE_PLAYING, (a0)
0005B388                          2649      
0005B388  303C 005E               2650      move.w  #94, d0
0005B38C  4E4F                    2651      trap    #15
0005B38E  4E75                    2652      rts
0005B390                          2653      
0005B390                          2654  
0005B390                          2655  
0005B390                          2656  -------------------- end include --------------------
0005B390                          2657      INCLUDE                             'src/Debug.X68'
0005B390                          2658  
0005B390                          2659  SPAWN_DEBUG_ENEMIES:
0005B390  2F3C 00000000           2660      move.l  #0, -(SP)
0005B396  4EB9 00059A0E           2661      jsr     SET_STAGE_NUMBER
0005B39C  588F                    2662      adda.l  #4, SP
0005B39E  4EB9 00059972           2663      jsr     SPAWN_NEXT_WAVE
0005B3A4                          2664  
0005B3A4                          2665  
0005B3A4  4E75                    2666      rts
0005B3A6                          2667      
0005B3A6                          2668      
0005B3A6                          2669      
0005B3A6                          2670      
0005B3A6                          2671      
0005B3A6                          2672      
0005B3A6                          2673  -------------------- end include --------------------
0005B3A6                          2674      
0005B3A6                          2675      
0005B3A6  =00000001               2676  DEBUG_ON            EQU         1
0005B3A6                          2677      
0005B3A6                          2678      
0005B3A6                          2679  START:   
0005B3A6  4EB9 0005B2F4           2680      jsr INIT
0005B3AC                          2681  
0005B3AC                          2682      RESET:
0005B3AC                          2683      
0005B3AC  4EB9 0005B374           2684      jsr     RESET_INIT
0005B3B2  4EB9 0005A61A           2685      jsr     CLEAR_TIMERS
0005B3B8  4EB9 00059A94           2686      jsr     CLEAR_ENTITIES
0005B3BE  4EB9 00058B98           2687      jsr     CLEAR_PATH_HANDLERS
0005B3C4  4EB9 0005B32C           2688      jsr     CREATE_HUD              ;spawning the hud here for now.
0005B3CA  4EB9 00059A1A           2689      jsr     RESET_LEVEL_SPAWNING
0005B3D0                          2690      
0005B3D0                          2691      SPAWN_NEW_PLAYER:               
0005B3D0  2F3C 00000000           2692      move.l  #0, -(SP)               ;No DelTheta + Theta
0005B3D6  2F3C 00000000           2693      move.l  #0, -(SP)               ;No ACC + Velocity
0005B3DC  2F3C FFFFFFFF           2694      move.l  #$FFFFFFFF, -(SP)       ;No Path Handler pls...
0005B3E2  2F3C 00000000           2695      move.l  #0, -(SP)               ;No Theta Initial
0005B3E8  3F3C 0055               2696      move.w  #PLAYER_SPAWN_POINT_X, -(SP)    
0005B3EC  3F3C 00BE               2697      move.w  #PLAYER_SPAWN_POINT_Y, -(SP)    
0005B3F0  2F3C 00000000           2698      move.l  #EDT_OFFSET_PLAYER, -(SP)                       ;Entity 0, which is Player.
0005B3F6  4EB9 00059ABE           2699      jsr     TRY_SPAWN_ENTITY
0005B3FC  DFFC 00000018           2700      adda.l  #24, SP
0005B402                          2701      
0005B402                          2702  
0005B402  103C 0001               2703      move.b  #DEBUG_ON, d0
0005B406  6700 0008               2704      beq NO_DEBUG_ENEMIES
0005B40A  4EB9 0005B390           2705      jsr     SPAWN_DEBUG_ENEMIES
0005B410                          2706      NO_DEBUG_ENEMIES:
0005B410  4EB9 00058B7C           2707      jsr UPDATE_DELTA_TIME
0005B416                          2708      
0005B416                          2709      
0005B416                          2710  
0005B416                          2711      MAIN_LOOP_START: 
0005B416                          2712       
0005B416  4EB9 00058B7C           2713          jsr UPDATE_DELTA_TIME
0005B41C  4EB9 000589E8           2714          jsr CLEAN_SCREEN  
0005B422                          2715          
0005B422  103C 0001               2716          move.b  #DEBUG_ON, d0
0005B426  6700 0008               2717          beq     NO_DEBUG_LINES
0005B42A  4EB9 00058B12           2718          jsr DRAW_GRID_LINES
0005B430                          2719          
0005B430                          2720          NO_DEBUG_LINES:
0005B430                          2721          
0005B430  4EB9 0005946E           2722          jsr READ_INPUT 
0005B436  41F9 0005B480           2723          lea GAME_STATE, a0
0005B43C  4287                    2724          clr.l   d7
0005B43E  1E10                    2725          move.b  (a0), d7
0005B440  E54F                    2726          lsl.w   #2, d7
0005B442  41F9 0005B482           2727          lea GAME_LOOP_FUNC_TABLE, a0
0005B448  2070 7000               2728          move.l  (a0, d7), a0
0005B44C  4E90                    2729          jsr (a0)
0005B44E  60C6                    2730          bra MAIN_LOOP_START
0005B450                          2731  
0005B450                          2732  
0005B450                          2733          
0005B450                          2734          MENU:
0005B450                          2735              ;Interpret input
0005B450                          2736              ;Draw stuff to screen
0005B450  4E75                    2737              rts
0005B452                          2738  
0005B452                          2739          GAME:     
0005B452  4EB9 000597DE           2740              jsr PLAYER_UPDATE               ;interpret input and update location
0005B458  4EB9 00059B62           2741              jsr ENTITY_UPDATE               ;pathing, sending things to spawn, updating animations (if I get that far), etc              
0005B45E  4EB9 0005B184           2742              jsr HANDLE_COLLISION            ;I hit something. What now?
0005B464  4EB9 0005A6AE           2743              jsr UPDATE_TIMERS               ;So objects don't act funky when spawning in here. 
0005B46A                          2744              ;Draw Score to Screen
0005B46A                          2745              ;Audio
0005B46A  4E75                    2746              rts
0005B46C                          2747          
0005B46C                          2748          PAUSE:
0005B46C                          2749              ;Interpret pause inputs.
0005B46C                          2750              ;Draw objects
0005B46C                          2751              ;Draw Menu
0005B46C  4E75                    2752              rts
0005B46E                          2753          
0005B46E                          2754          HI_SCORE:
0005B46E                          2755              ;Collect Hi-Score inputs
0005B46E                          2756              ;Draw objects and write text to screen
0005B46E  4E75                    2757              rts
0005B470                          2758             
0005B470                          2759          
0005B470                          2760          
0005B470                          2761          
0005B470                          2762      
0005B470                          2763      
0005B470                          2764      
0005B470                          2765      
0005B470                          2766      
0005B470                          2767      
0005B470                          2768  
0005B470  FFFF FFFF               2769      SIMHALT             ; halt simulator
0005B474                          2770      
0005B474                          2771      
0005B474= 00000000                2772  SCORE               dc.l        0    
0005B478= 00000000                2773  TIME_LAST_UPDATE    dc.l        0
0005B47C= 00000000                2774  DELTA_TIME          dc.l        0       ;SET ME! In hundredths of a second!
0005B480= 00                      2775  GAME_STATE          dc.b        0
0005B481                          2776  
0005B481                          2777  ;HISCORES       INCBIN      'hiscores.bin'      ;hiscores
0005B481                          2778  ;PLAYERPREFS    INCBIN      'playerprefs.bin'   ;settings
0005B481                          2779  
0005B482= 0005B450 0005B452 ...   2780  GAME_LOOP_FUNC_TABLE    dc.l    MENU, GAME, PAUSE, HI_SCORE
0005B492                          2781      
0005B492                          2782      END    START        

No errors detected
No warnings generated


SYMBOL TABLE INFORMATION
Symbol-name         Value
-------------------------
ACTION_INPUT        5954C
ACTION_INPUT_DOWN   59550
ADD_SPEEDS          592C0
ADD_THETAS          5929A
ALL_TIMERS          5A704
ANGLE_MAX           1680
BIT_OFFSET_DOWN     0
BIT_OFFSET_FOCUS    0
BIT_OFFSET_LEFT     18
BIT_OFFSET_PAUSE    8
BIT_OFFSET_RIGHT    10
BIT_OFFSET_SECONDARY  10
BIT_OFFSET_SHOOT    18
BIT_OFFSET_UP       8
CC_PB_INNER_LOOP    5B216
CC_PB_OUTER_LOOP    5B20E
CHECK_BULLET_PIERCE  5B07C
CLEAN_HI_SCORE_SCREEN  58A6A
CLEAN_MENU_SCREEN   58A1C
CLEAN_PAUSE_SCREEN  58A4A
CLEAN_PLAYING_SCREEN  58A28
CLEAN_SCREEN        589E8
CLEAR_ENTITIES      59A94
CLEAR_PATH_HANDLERS  58B98
CLEAR_PATH_HANDLER_LOOP  58BAE
CLEAR_TIMERS        5A61A
CLEAR_TIMER_LOOP    5A628
CLOSE_COLLISION_TABLE  5B2D4
COLLISION           5B2CA
COLLISION_BOX_OVERLAP  5B266
COLLISION_LAYER_CHECKS  5B1FA
COLOR_BANK          589CB
COLOR_BANK_LENGTH   589CA
COLOR_PLAYER_BULLET_INNER  E3F4FF
COLOR_PLAYER_BULLET_OUTER  2A6387
COS_VALUE           5972A
CREATE_HUD          5B32C
CURR_FORMATION_SPAWN  59A34
CURR_LEVEL          59A33
CURR_PATH_HANDLER   58D3E
CURR_TIMER          5A700
DEAL_DAMAGE         5B07E
DEBUG_LEVEL         59A38
DEBUG_ON            1
DELTA_TIME          5B47C
DELTA_TIME_FRAC_BITS  3
DESTROY_OBJ         5B066
DISPLAYBITMAP       593DE
DISPLAY_BMP_DATA    59340
DRAW_ENEMY_BULLET   589A4
DRAW_FUNCTIONS      589D8
DRAW_GRID_LINES     58B12
DRAW_PLAYER         58846
DRAW_PLAYER_BULLET  58968
DRAW_ROBOT          58966
DRAW_SCALED_FROM_POSITION  58A6E
DRAW_SCALED_SHAPE   58A96
DRAW_SEVEN_SEGMENT  589C8
DRAW_SLIME          588F0
EDT_OFFSET_BULLET   2
EDT_OFFSET_PLAYER   0
EDT_OFFSET_ROBOT    3
EDT_OFFSET_SLIME    1
END_LINE_ADD        5946C
ENTITY_DATA_TABLE   5A60E
ENTITY_NUM_ACTIVE   5A566
ENTITY_OFF_SCREEN_MAX  3C
ENTITY_SIZE         20
ENTITY_TABLE_BOUNDS  5A57E
ENTITY_TABLE_START  59C06
ENTITY_UPDATE       59B62
ENTITY_VELOCITY_UNDERFLOW  58C76
ENTITY_VEL_MAX      8000
EN_FUNC_VAR_TABLE   59C06
EOF                 5946E
ES_LOOP             59AA8
ET_END              5A566
ET_ENEMIES_START    59D46
ET_ENEMY_BULLETS_START  5A146
ET_PICKUPS_START    5A506
ET_PLAYER_BULLETS_START  59C26
ET_PLAYER_START     59C06
ET_PLAYER_SWORD_START  59D26
EU_BULLET_INACTIVE_OBJ  59BA0
EU_BULLET_LOOP      59B6C
EU_ENEMY_INACTIVE   59BE6
EU_ENEMY_LOOP       59BB2
FACE_PLAYER         58D3C
FIND_NEW_PATH_HANDLER  58BBC
FNPH_LOOP           58BE0
FORMATION_BANK      59648
FORMATION_NODE_SIZE  10
FOUND_NEW_PATH      58BF0
FOUND_OBJ           59B02
F_SPAWN_BASIC       59618
F_SPAWN_DEBUG       595E8
F_SPAWN_PLAYER      59618
GAME                5B452
GAME_LOOP_FUNC_TABLE  5B482
GAME_STATE          5B480
GAME_STATE_HI_SCORE  3
GAME_STATE_MAIN_MENU  0
GAME_STATE_PAUSED   2
GAME_STATE_PLAYING  1
GET_ACCELERATION    1
GET_ANG_VEL         3
GET_COLLISION_BOX_BOUNDS  14
GET_COLLISION_BOX_TL  10
GET_ENEMY           12C1E
GET_ENTITY_PATH_ADDRESS  1C
GET_ENTITY_TYPE     1A
GET_FORMATION_ENTITY  0
GET_FORMATION_EN_VAR  1
GET_FORMATION_IN_ACC  C
GET_FORMATION_IN_DEL_THET  8
GET_FORMATION_IN_THETA  A
GET_FORMATION_IN_VEL  E
GET_FORMATION_PATH  3
GET_FORMATION_POS   4
GET_FORMATION_THETA  2
GET_FUNCTION_ADDR   4
GET_FUNC_INPUT_1    8
GET_FUNC_INPUT_2    C
GET_HEALTH          16
GET_INFO            18
GET_PATHNODE_ARG_1  4
GET_PATHNODE_ARG_2  6
GET_PATHNODE_END    0
GET_PATHNODE_TIME_ELAPSED  2
GET_PATHNODE_TYPE   1
GET_PATH_ADDR       0
GET_PATH_INSTRUCTION  5
GET_PATH_INSTRUCTION_OFFSET  6
GET_PATH_NODE_OFFSET  E
GET_PH_ACC          4
GET_PH_DEL_THET     8
GET_PH_FLAG         C
GET_PH_THETA        A
GET_PH_VEL          6
GET_POSITION        8
GET_POWER           7
GET_SIZE            C
GET_SPAWN_DELAY     6
GET_SPAWN_FORMATION  1
GET_SPAWN_HAS_NEXT_WAVE  0
GET_SPAWN_POSITION_X  3
GET_SPAWN_POSITION_Y  2
GET_SPAWN_THETA     4
GET_SPRITE          4
GET_THETA           2
GET_TIME_REMAINING  0
GET_VECTOR          59650
GET_VELOCITY        0
GIVE_BONUS          5B0A4
GS_PAUSE_BOT_RIGHT_X  C0
GS_PAUSE_BOT_RIGHT_Y  B4
GS_PAUSE_TOP_LEFT_X  40
GS_PAUSE_TOP_LEFT_Y  3C
GS_PLAY_BOT_RIGHT_X  BA
GS_PLAY_BOT_RIGHT_Y  F0
GS_PLAY_TOP_LEFT_X  0
GS_PLAY_TOP_LEFT_Y  0
HANDLE_COLLISION    5B184
HI_SCORE            5B46E
HUD_HEIGHT          F0
HUD_OFFSET_X        2EC
HUD_OFFSET_Y        FFFFFFFC
HUD_WIDTH           46
INC_LOOP            5A6F8
INIT                5B2F4
INNERLOOP24         593E0
INNERLOOP32         5942C
INSTRUCTION_BANK    59322
INVAL_OBJECT        58AA2
IS_IT_EMPTY         5A66E
ITERATE_IN          5B252
ITERATE_OUT         5B258
JUMP_TO_PATH        592F2
KEYCODE_DOWN        28
KEYCODE_FIRE        5A
KEYCODE_FOCUS       10
KEYCODE_LEFT        25
KEYCODE_PAUSE       D
KEYCODE_RIGHT       27
KEYCODE_SECONDARY   58
KEYCODE_UP          26
KILL_ENTITY         59BF0
KILL_ENTITY_NO_POINTS  59BF0
KILL_OBJ            5B094
KILL_PATH           58D30
LEVEL_DATA          59A80
LEVEL_END_FLAG      59A32
LEVEL_FLAG_COMPLETE  1
LEVEL_FLAG_INCOMPLETE  0
LEVEL_NOT_COMPLETED  59984
LOOP_OVER_PATH      59314
MAIN_LOOP_START     5B416
MAX_NUM_ENEMIES     20
MAX_NUM_ENEMY_BULLETS  1E
MAX_NUM_ENTITIES    4B
MAX_NUM_PICKUPS     3
MAX_NUM_PLAYERS     1
MAX_NUM_PLAYER_BULLETS  8
MAX_NUM_PLAYER_SWORD  1
MENU                5B450
MOVEMENT_TABLE      59932
MOVE_INPUT          59554
MOVE_INPUT_DOWN     59558
MOVE_VALUES         5A688
NEXT_PATH_NODE      5922E
NIL                 5B064
NOT_INSTANT_TIMER   5A65E
NO_CLAMP_X_MAX      59918
NO_CLAMP_X_MIN      598DA
NO_CLAMP_Y_MAX      59904
NO_CLAMP_Y_MIN      598F4
NO_COLLISION        5B2D2
NO_DEBUG_ENEMIES    5B410
NO_DEBUG_LINES      5B430
NO_DOWN_DOWN        59546
NO_FOCUS_DOWN       594DA
NO_LEFT_DOWN        5950A
NO_NEXT_PATH_TIMER  59290
NO_NEXT_WAVE        59A02
NO_PATH_HANDLER     59B60
NO_PAUSE_DOWN       594C6
NO_PAUSE_INPUT      59834
NO_PH_VEL_CLAMP     58C76
NO_RIGHT_DOWN       5951E
NO_SHOOT_DOWN       5949E
NO_SHOOT_SECONDARY  594B2
NO_UP_DOWN          59532
NUM_ANGLES          5A
NUM_COLLISION_ROWS  6
NUM_TIMERS          96
ON_COLLISION        5B136
ON_COLLISION_FUNCTIONS  5B0A6
OUTERLOOP24         593DE
OUTERLOOP32         5942A
PATHNODE_TYPE_ADD_SPEEDS  3
PATHNODE_TYPE_ADD_THETAS  1
PATHNODE_TYPE_JUMP_TO_PATH  5
PATHNODE_TYPE_RESET_PATH  6
PATHNODE_TYPE_SET_SPEEDS  2
PATHNODE_TYPE_SET_THETAS  0
PATHNODE_TYPE_SPAWN_FORM  4
PATH_BANK           5921A
PATH_HANDLER_BANK   58D42
PATH_HANDLER_SIZE   10
PATH_NODE_SIZE      8
PATH_UPDATES        58C38
PAUSE               5B46C
PG_DEBUG            59618
PIXEL_SHIFT         2
PLAYER_BULLET_DATA  5A5EE
PLAYER_DATA         5A5AE
PLAYER_DONT_FIRE    59854
PLAYER_DONT_SECONDARY  59870
PLAYER_GUN          D0
PLAYER_IS_ALIVE     597F2
PLAYER_NORMAL_SPEED  59818
PLAYER_SPAWN_POINT_X  55
PLAYER_SPAWN_POINT_Y  BE
PLAYER_SPEED_FOCUS  C
PLAYER_SPEED_NORMAL  8
PLAYER_SWORD_DAMAGE  FF
PLAYER_UPDATE       597DE
P_BOX               5921A
P_CIRCLE            5921A
P_DEBUG             591F2
P_LINE              59212
P_LINE_SHOOT        5921A
READ_INPUT          5946E
RESET               5B3AC
RESET_INIT          5B374
RESET_LEVEL_SPAWNING  59A1A
RESTOREREGISTERS    59468
RTS                 5A640
SCORE               5B474
SCREEN_SIZE_PIXELS_X  400
SCREEN_SIZE_PIXELS_Y  3C0
SEARCH_FOR_NEXT_FREE  59AF2
SET_COLLISION_ZONE  58AD2
SET_SPEEDS          592B8
SET_STAGE_NUMBER    59A0E
SET_THETAS          59292
SET_TIMER           5A640
SIN_VALUE           59676
SKIP_DOWN           5989A
SKIP_LEFT           598BE
SKIP_RIGHT          598B2
SKIP_UP             598A6
SLIME_DATA          5A5CE
SPAWN_DEBUG_ENEMIES  5B390
SPAWN_FORM          592D2
SPAWN_FORMATION     5955C
SPAWN_NEW_PLAYER    5B3D0
SPAWN_NEXT_WAVE     59972
SPAWN_WAVE_SIZE     8
SPEED_FRAC_BITS     6
SPR_HUD             1000
SPR_PLAYER          11B94
SPR_SLIME           1170A
SP_FORM_LOOP        59578
STAGE_1             59A80
STAGE_2             59A80
STAGE_3             59A80
STAGE_4             59A80
STAGE_BORDER_X_MAX  BA
STAGE_BORDER_Y_MAX  F0
START               5B3A6
STATUS_ALIVE        FF
STATUS_DEAD         0
STOP_SPAWN_FORM     595E6
TEMP_SCALE_X        58AFA
TEMP_SCALE_Y        58B06
TEST_AREA           5933E
THETA_BELOW_MAX     58C90
THETA_FRAC_BITS     4
TIMER_SIZE          10
TIME_LAST_UPDATE    5B478
TOO_FAR_OFF_SCREEN  58D24
TRAP_CODE_INPUT     13
TRAP_ELLIPSE_DRAW   58
TRAP_PLAYER_BULLET_SHAPE  58
TRAP_RECT_DRAW      57
TRY_SPAWN_ENTITY    59ABE
TWENTYFOURBITENDLINECHANGE  59376
TWENTYFOURBITOFFSETCHANGE  593CA
UPDATE_DELTA_TIME   58B7C
UPDATE_SCORE        58A6C
UPDATE_TIMERS       5A6AE
UP_TIM_LOOP         5A6C6
VALIDBMP            59340
VECTOR_FRAC_BITS    4
WIDTH_BACKUP        5946A
